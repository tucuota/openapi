openapi: 3.0.1
info:
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  title: TuCuota API
  description: |
    # Introduction

    The TuCuota API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.

    The base URLs for the TuCuota API is: `https://api.tucuota.com`.

    ### Content types

    TuCuota API only supports `json`. Make sure to include the following header on your requests.

    #### Content-Type Header

    ```
    Content-Type: "application/json"
    ```
    # Authentication

    The API is only available over HTTPS. Attempting to access the API over an unsecured HTTP connection will return a tls_required error.

    ### Get an API key

    To create new API keys please login and go to the [developers section](https:///dashboard.tucuota.com/developers) of the dashboard.

    For each environment (live and test) yo'll find two types of API Keys:

    - Publishable (`pk_...`): can be publicly-accessible in your web client-side code to tokenize payment information.
    - Secret (`sk_...`): To be used on the server-side. Must be secret and stored securely in your application's code to call TuCuota APIs.

    To authenticate you must provide the API key in an Authorization request header (using the Bearer authentication scheme) when making API requests.

    ### Example Authentication Header

    ```
    Authorization: Bearer sk_live_...
    ```

    All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.
    # Errors

    This API uses HTTP status codes to communicate with the API consumer.

    - `200 OK` - Response to a successful GET, PUT, PATCH or DELETE.
    - `201 Created` - Response to a POST that results in a creation.
    - `204 No Content` - Response to a successful request that won't be returning a body (like a DELETE request).
    - `400 Bad Request` - Malformed request; form validation errors.
    - `401 Unauthorized` - When no or invalid authentication details are provided.
    - `403 Forbidden` - When authentication succeeded but authenticated user doesn't have access to the resource.
    - `404 Not Found` - When a non-existent resource is requested.
    - `405 Method Not Allowed` - Method not allowed.
    - `406 Not Acceptable` - Could not satisfy the request Accept header.
    - `415 Unsupported Media Type` - Unsupported media type in request.

    #### Error response

    This API returns both, machine-readable error codes and human-readable error messages in response body when an error is encountered.

    ##### Example

    ###### Validation Error

    ```json
    {
      "message": "The given data was invalid.",
      "errors": {
        "organization_name": ["El campo debe tener algún valor."],
        "mobile_number": ["El campo debe tener algún valor."],
        "province": ["El campo debe tener algún valor."],
        "locality": ["El campo debe tener algún valor."],
        "address": ["El campo debe tener algún valor."]
      }
    }
    ```

    ###### Generic Error

    ```json
    {
      "message": "Unauthenticated."
    }
    ```
    # Idempotent Requests

    The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response. For example, if a request to create a payment does not respond due to a network connection error, you can retry the request with the same idempotency key to guarantee that no more than one charge is created.

    To perform an idempotent request, provide an additional `Idempotency-Key: <key>` header to the request.

    Idempotency works by saving the resulting status code and body of the first request made for any given idempotency key, regardless of whether it succeeded or failed. Subsequent requests with the same key return the same result, including 500 errors.

    An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions.

    Keys are eligible to be removed from the system after they're at least 24 hours old, and a new request is generated if a key is reused after the original has been pruned. The idempotency layer compares incoming parameters to those of the original request and errors unless they're the same to prevent accidental misuse.

    Results are only saved if an API endpoint started executing. If incoming parameters failed validation, or the request conflicted with another that was executing concurrently, no idempotent result is saved because no API endpoint began execution. It is safe to retry these requests.

    All `POST` requests accept idempotency keys. Sending idempotency keys in `GET` and `DELETE` requests has no effect and should be avoided, as these requests are idempotent by definition.
    # Metadata

    The following objects have a metadata parameter that you can use this parameter to attach key-value data: - Customer - Mandate - Payment - Payment Method - Subscription

    You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long.

    Metadata is useful for storing additional, structured information on an object.

    Do not store any sensitive information (bank account numbers, card details, etc.) as metadata.
    # Pagination

    This API uses the [Link header - RFC 5988](http://tools.ietf.org/html/rfc5988#page-6) to include pagination details.

    An example of a Link header is described in [GitHub documentation](https://developer.github.com/guides/traversing-with-pagination/).

    By default, each page contains `25` elements. It can be requested up to `100` elements per page adding the `limit` parameter. For example adding `?limit=100&page=2` will return the second page of `100` elements.
    # Request IDs

    Each API request has an associated request identifier. You can find this value in the response headers, under `Request-Id`. You can also find request identifiers in the URLs of individual request logs in your (Dashboard)[https://dashboard.tucuota.com/developer/logs].
    # Conventions

    ### Notational Conventions

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119).

    ### HTTP Methods

    This API uses HTTP verbs (methods) as following:

    - `GET` - _Read_ - used to **read** (or retrieve) a representation of a resource,
    - `POST` - _Create_ - used to **create** new resources. In particular, it's used to create subordinate resources.
    - `PUT` - _Update/Replace_ - used for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. On successful request, replaces identified resource with the request body.
    - `PATCH` - _Update/Modify_ - used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource.
    - `DELETE` - _Delete_ - used to **delete** a resource identified by a URI.

    ### Representation of Date and Time

    All exchange of date and time-related data MUST be done according to [RFC339 standard](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).

    ### Versioning

    This API uses `Api-Version` header to identify requested version. Every **minor** version SHOULD be backward compatible. However, **major** versions MAY introduce _breaking changes_.

    `Api-Version: `

    This header SHOULD be present in every request. If not, API MUST use the newest available major release.

    If requested version is not available, API SHOULD try to fall back to the next available minor release.

    When backwards-incompatible changes are made to the API, a new, dated version is released. The current version of the API is `2022-02-14`.

    ### Resource IDs

    This API uses short non-sequential url-friendly unique ids. Every resource id MUST consists of 12 url-friendly characters: `A-Z`, `a-z`, `0-9`, `_` and `-`.

    #### Example

    `PY6b3Rr6nRMo`
    # Testing

    ### Testing Card and CBU numbers

    In sandbox mode the following test cards and CBUs can be used to create payments that produce specific responses useful for testing different scenarios.

    | Brand      | Number                 | Result     |
    | ---------- | ---------------------- | ---------- |
    | cbu        | 2859363672283668188432 | approved   |
    | cbu        | 2852656051819605126406 | rejected   |
    | cbu        | 2858814288841490615567 | failed     |
    | cbu        | 0110022831266917230013 | will_retry |
    | mastercard | 5447651834106668       | approved   |
    | mastercard | 5457948807868523       | rejected   |
    | mastercard | 5292525121482410       | failed     |
    | visa       | 4024007127322104       | approved   |
    | visa       | 4556854712355908       | rejected   |
    | visa       | 4485388690536078       | failed     |
    | amex       | 377539501632477        | approved   |
    | amex       | 341400508811411        | rejected   |
    | amex       | 372974912152697        | failed     |
    # Webhooks

    To start receiving webhooks, you’ll need to add webhook endpoints from your [Dashboard](/dashboard/developers).

    <blockquote>
        Example webhook:
    </blockquote>

    ```json
    {
      "id": "EVPYeJeyeJ7r",
      "created_at": "2019-05-23T20:18:28-0300",
      "data": {
        "object": {
          "id": "CS9PL8eeo8aB",
          "paid": false,
          "amount": 1600,
          "status": "pending_submission",
          "gateway": "GWd1e9nQwK7v",
          "currency": "ARS",
          "customer": {
            "id": "CS9PL8eeo8aB",
            "name": "Máximo Irizarry",
            "email": "mirrizarry@paez.com",
            "livemode": true,
            "metadata": [],
            "created_at": "2018-05-01T11:45:14-0300",
            "updated_at": "2018-05-01T11:45:14-0300",
            "gateway_identifier": "001234",
            "mobile_number": "+5493812596655",
            "identification_type": "",
            "identification_number": ""
          },
          "livemode": true,
          "metadata": [],
          "retryable": false,
          "created_at": "2018-05-01T11:45:14-0300",
          "updated_at": "2018-05-01T11:45:14-0300",
          "charge_date": "2019-05-15",
          "description": "Pago extra",
          "subscription": null,
          "name": "Máximo Irizarry",
          "email": "mirrizarry@paez.com",
          "gateway_identifier": "456700",
          "mobile_number": "+5493812596655",
          "identification_type": "",
          "identification_number": ""
        }
      },
      "livemode": true,
      "resource": "payment",
      "resource_id": "PY6b3Rr6nRMo",
      "type": "payment.retrying"
    }
    ```

    When an event occurs in your account, we’ll send it to every enabled webhook endpoint as a POST request.

    ### Webhooks types

    - `customer.created`
    - `customer.disabled`
    - `customer.restored`
    - `customer.updated`
    - `gateway.created`
    - `gateway.disabled`
    - `gateway.updated`
    - `payment.cancelled`
    - `payment.created`
    - `payment.retrying`
    - `payment.updated`
    - `payment_method.automatically_updated`
    - `payment_method.created`
    - `payment_method.updated`
    - `subscription.cancelled`
    - `subscription.created`
    - `subscription.finished`
    - `subscription.paused`
    - `subscription.resumed`
    - `subscription.updated`
    - `user.updated_available_brands`

    ### Testing the webhooks in local environments

    You can easy create test webhooks using https://webhook.site/ With that you will be able to see what we are sending to our API consumers.

    Also, to start integrating the webhooks, your code will need to be accessible from the internet so TuCuota can reach it with HTTP requests. If you’re working locally, the easiest way to do this is with [ngrok](https://ngrok.com/).
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: TuCuota Devs
    email: devs@tucuota.com
    url: 'https://tucuota.com/docs/api'
  x-logo:
    url: 'https://tucuota.com/img/TuCuota.svg'
    altText: TuCuota
  version: '2022-02-14'
servers:
  - url: 'https://api.tucuota.com'
    description: API server
paths:
  /v1/customers:
    get:
      operationId: GetCustomers
      summary: List all customers
      description: By default newest customers will be first on the list.
      parameters:
        - name: page
          in: query
          description: Cursor value to paginate response.
          schema:
            type: number
          example: '10'
        - name: limit
          in: query
          description: Number of records to return.
          schema:
            type: number
          example: '1'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      title: Customer
                      description: This object represents a customer of your organization.
                      type: object
                      properties:
                        id:
                          description: Unique identifier for the object.
                          type: string
                          example: CSljikas98
                          maxLength: 5000
                        name:
                          description: The customer's full name or business name.
                          type: string
                          example: Jorgelina Castro
                        email:
                          description: The customer's email address.
                          type: string
                          example: asd@asd.com
                        livemode:
                          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                          type: boolean
                        metadata:
                          description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                          example:
                            some: metadata
                          anyOf:
                            - additionalProperties:
                                type: string
                              type: object
                            - enum:
                                - ''
                              type: string
                            - type: 'null'
                        mobile_number:
                          example: '5491164531234'
                          oneOf:
                            - type: 'null'
                            - type: string
                        gateway_identifier:
                          type: integer
                          format: int32
                          example: 383473
                        identification_number:
                          example: 15.555.324
                          oneOf:
                            - type: 'null'
                            - type: string
                        identification_type:
                          example: DNI
                          oneOf:
                            - type: 'null'
                            - type: string
                        created_at:
                          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          type: string
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                        updated_at:
                          description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          type: string
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                        active_subscriptions_count:
                          type: integer
                          format: int32
                          example: 0
                        active_subscriptions_sum:
                          type: integer
                          format: int32
                          example: 0
                        approved_payments_count:
                          type: integer
                          format: int32
                          example: 0
                        approved_payments_sum:
                          type: integer
                          format: int32
                          example: 0
                        cancelled_subscriptions_count:
                          type: integer
                          format: int32
                          example: 0
                        paused_subscriptions_count:
                          type: integer
                          format: int32
                          example: 0
                        rejected_payments_count:
                          type: integer
                          format: int32
                          example: 0
                        rejected_payments_sum:
                          type: integer
                          format: int32
                          example: 0
                        finished_subscriptions_count:
                          type: integer
                          format: int32
                          example: 0
                        deleted_at:
                          description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                          oneOf:
                            - type: 'null'
                            - type: string
                  links:
                    description: Pagination metadata
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      last:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      next:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      prev:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                    title: Response Meta
                  meta:
                    description: Pagination metadata
                    type: object
                    properties:
                      current_page:
                        type: number
                        example: 1
                      from:
                        type: number
                        example: 1
                      last_page:
                        type: number
                        example: 28
                      per_page:
                        type: number
                        example: 1
                      to:
                        type: number
                        example: 1
                      total:
                        type: number
                        example: 2
                      path:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                    title: Response Meta
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Customers
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://api.tucuota.com/v1/customers?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE' \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET 'https://api.tucuota.com/v1/customers?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE' \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/customers',
              qs: {page: 'SOME_NUMBER_VALUE', limit: 'SOME_NUMBER_VALUE'},
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/customers?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/customers');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString([
              'page' => 'SOME_NUMBER_VALUE',
              'limit' => 'SOME_NUMBER_VALUE'
            ]));

            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/customers?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/customers?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
    post:
      operationId: PostCustomer
      summary: Create a customer
      description: Create a customer
      requestBody:
        content:
          application/json:
            encoding:
              metadata:
                explode: true
                style: deepObject
            example:
              name: Pedro Lombardo
              email: pedrolombardo@email.com
              gateway_identifier: '001234'
              identification_type: DNI
              identification_number: 237767265
            schema:
              type: object
              properties:
                name:
                  description: The customer's full name or business name.
                  type: string
                  example: Jorgelina Castro
                email:
                  description: The customer's email address.
                  type: string
                  example: asd@asd.com
                gateway_identifier:
                  type: string
                identification_type:
                  type: string
                identification_number:
                  type: number
                metadata:
                  description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                  example:
                    some: metadata
                  anyOf:
                    - additionalProperties:
                        type: string
                      type: object
                    - enum:
                        - ''
                      type: string
                    - type: 'null'
              additionalProperties: false
        required: true
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a customer of your organization.
                    type: object
                    properties:
                      id:
                        description: Unique identifier for the object.
                        type: string
                        example: CSljikas98
                        maxLength: 5000
                      name:
                        description: The customer's full name or business name.
                        type: string
                        example: Jorgelina Castro
                      email:
                        description: The customer's email address.
                        type: string
                        example: asd@asd.com
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      mobile_number:
                        example: '5491164531234'
                        oneOf:
                          - type: 'null'
                          - type: string
                      gateway_identifier:
                        type: integer
                        format: int32
                        example: 383473
                      identification_number:
                        example: 15.555.324
                        oneOf:
                          - type: 'null'
                          - type: string
                      identification_type:
                        example: DNI
                        oneOf:
                          - type: 'null'
                          - type: string
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      active_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      active_subscriptions_sum:
                        type: integer
                        format: int32
                        example: 0
                      approved_payments_count:
                        type: integer
                        format: int32
                        example: 0
                      approved_payments_sum:
                        type: integer
                        format: int32
                        example: 0
                      cancelled_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      paused_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      rejected_payments_count:
                        type: integer
                        format: int32
                        example: 0
                      rejected_payments_sum:
                        type: integer
                        format: int32
                        example: 0
                      finished_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      deleted_at:
                        description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                        oneOf:
                          - type: 'null'
                          - type: string
                    title: Customer
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                errors:
                  email:
                    - El email es inválido.
                message: The given data was invalid.
      tags:
        - Customers
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/customers \
              --header 'Authorization: Bearer sk_live_...' \
              --header 'content-type: application/json' \
              --data '{"name":"Jorgelina Castro","email":"asd@asd.com","gateway_identifier":"string","identification_type":"string","identification_number":0,"metadata":{"some":"metadata"}}'
        - lang: Shell + Httpie
          source: |-
            echo '{"name":"Jorgelina Castro","email":"asd@asd.com","gateway_identifier":"string","identification_type":"string","identification_number":0,"metadata":{"some":"metadata"}}' |  \
              http POST https://api.tucuota.com/v1/customers \
              Authorization:'Bearer sk_live_...' \
              content-type:application/json
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/customers',
              headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer sk_live_...'
              },
              body: {
                name: 'Jorgelina Castro',
                email: 'asd@asd.com',
                gateway_identifier: 'string',
                identification_type: 'string',
                identification_number: 0,
                metadata: {some: 'metadata'}
              },
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/customers",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"name\":\"Jorgelina Castro\",\"email\":\"asd@asd.com\",\"gateway_identifier\":\"string\",\"identification_type\":\"string\",\"identification_number\":0,\"metadata\":{\"some\":\"metadata\"}}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_...",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"name":"Jorgelina Castro","email":"asd@asd.com","gateway_identifier":"string","identification_type":"string","identification_number":0,"metadata":{"some":"metadata"}}');

            $request->setRequestUrl('https://api.tucuota.com/v1/customers');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $request->setHeaders([
              'content-type' => 'application/json',
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            payload = "{\"name\":\"Jorgelina Castro\",\"email\":\"asd@asd.com\",\"gateway_identifier\":\"string\",\"identification_type\":\"string\",\"identification_number\":0,\"metadata\":{\"some\":\"metadata\"}}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Bearer sk_live_..."
                }

            conn.request("POST", "/v1/customers", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/customers")
              .header("content-type", "application/json")
              .header("Authorization", "Bearer sk_live_...")
              .body("{\"name\":\"Jorgelina Castro\",\"email\":\"asd@asd.com\",\"gateway_identifier\":\"string\",\"identification_type\":\"string\",\"identification_number\":0,\"metadata\":{\"some\":\"metadata\"}}")
              .asString();
      x-codegen-request-body-name: body
  '/v1/customers/{id}':
    get:
      operationId: CustomersGetCustomer
      summary: Retrieve a customer
      description: Retrieve a customer.
      parameters:
        - name: id
          in: path
          description: Customer ID.
          required: true
          schema:
            type: string
          example: CS9PL8eeo8aB
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a customer of your organization.
                    type: object
                    properties:
                      id:
                        description: Unique identifier for the object.
                        type: string
                        example: CSljikas98
                        maxLength: 5000
                      name:
                        description: The customer's full name or business name.
                        type: string
                        example: Jorgelina Castro
                      email:
                        description: The customer's email address.
                        type: string
                        example: asd@asd.com
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      mobile_number:
                        example: '5491164531234'
                        oneOf:
                          - type: 'null'
                          - type: string
                      gateway_identifier:
                        type: integer
                        format: int32
                        example: 383473
                      identification_number:
                        example: 15.555.324
                        oneOf:
                          - type: 'null'
                          - type: string
                      identification_type:
                        example: DNI
                        oneOf:
                          - type: 'null'
                          - type: string
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      active_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      active_subscriptions_sum:
                        type: integer
                        format: int32
                        example: 0
                      approved_payments_count:
                        type: integer
                        format: int32
                        example: 0
                      approved_payments_sum:
                        type: integer
                        format: int32
                        example: 0
                      cancelled_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      paused_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      rejected_payments_count:
                        type: integer
                        format: int32
                        example: 0
                      rejected_payments_sum:
                        type: integer
                        format: int32
                        example: 0
                      finished_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      deleted_at:
                        description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                        oneOf:
                          - type: 'null'
                          - type: string
                    title: Customer
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Not Found response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Record not found
                    title: Not Found
      tags:
        - Customers
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://api.tucuota.com/v1/customers/CS9PL8eeo8aB \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET https://api.tucuota.com/v1/customers/CS9PL8eeo8aB \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/customers/CS9PL8eeo8aB',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/customers/CS9PL8eeo8aB",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/customers/CS9PL8eeo8aB');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/customers/CS9PL8eeo8aB", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/customers/CS9PL8eeo8aB")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
    put:
      operationId: CustomersUpdateCustomer
      summary: Update a customer
      description: Update a customer.
      parameters:
        - name: id
          in: path
          description: Gateway ID.
          required: true
          schema:
            type: string
          example: CS9PL8eeo8aB
      requestBody:
        content:
          application/json:
            encoding:
              metadata:
                explode: true
                style: deepObject
            example:
              name: Pedro Lombardo
              email: pedrolombardo@email.com
            schema:
              type: object
              properties:
                name:
                  description: The customer's full name or business name.
                  type: string
                  example: Jorgelina Castro
                email:
                  description: The customer's email address.
                  type: string
                  example: asd@asd.com
                gateway_identifier:
                  type: string
                identification_type:
                  type: string
                identification_number:
                  type: number
                metadata:
                  description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                  example:
                    some: metadata
                  anyOf:
                    - additionalProperties:
                        type: string
                      type: object
                    - enum:
                        - ''
                      type: string
                    - type: 'null'
              additionalProperties: false
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a customer of your organization.
                    type: object
                    properties:
                      id:
                        description: Unique identifier for the object.
                        type: string
                        example: CSljikas98
                        maxLength: 5000
                      name:
                        description: The customer's full name or business name.
                        type: string
                        example: Jorgelina Castro
                      email:
                        description: The customer's email address.
                        type: string
                        example: asd@asd.com
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      mobile_number:
                        example: '5491164531234'
                        oneOf:
                          - type: 'null'
                          - type: string
                      gateway_identifier:
                        type: integer
                        format: int32
                        example: 383473
                      identification_number:
                        example: 15.555.324
                        oneOf:
                          - type: 'null'
                          - type: string
                      identification_type:
                        example: DNI
                        oneOf:
                          - type: 'null'
                          - type: string
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      active_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      active_subscriptions_sum:
                        type: integer
                        format: int32
                        example: 0
                      approved_payments_count:
                        type: integer
                        format: int32
                        example: 0
                      approved_payments_sum:
                        type: integer
                        format: int32
                        example: 0
                      cancelled_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      paused_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      rejected_payments_count:
                        type: integer
                        format: int32
                        example: 0
                      rejected_payments_sum:
                        type: integer
                        format: int32
                        example: 0
                      finished_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      deleted_at:
                        description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                        oneOf:
                          - type: 'null'
                          - type: string
                    title: Customer
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Not Found response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Record not found
                    title: Not Found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                errors:
                  email:
                    - El email es inválido.
                message: The given data was invalid.
      tags:
        - Customers
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request PUT \
              --url https://api.tucuota.com/v1/customers/CS9PL8eeo8aB \
              --header 'Authorization: Bearer sk_live_...' \
              --header 'content-type: application/json' \
              --data '{"name":"Jorgelina Castro","email":"asd@asd.com","gateway_identifier":"string","identification_type":"string","identification_number":0,"metadata":{"some":"metadata"}}'
        - lang: Shell + Httpie
          source: |-
            echo '{"name":"Jorgelina Castro","email":"asd@asd.com","gateway_identifier":"string","identification_type":"string","identification_number":0,"metadata":{"some":"metadata"}}' |  \
              http PUT https://api.tucuota.com/v1/customers/CS9PL8eeo8aB \
              Authorization:'Bearer sk_live_...' \
              content-type:application/json
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'PUT',
              url: 'https://api.tucuota.com/v1/customers/CS9PL8eeo8aB',
              headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer sk_live_...'
              },
              body: {
                name: 'Jorgelina Castro',
                email: 'asd@asd.com',
                gateway_identifier: 'string',
                identification_type: 'string',
                identification_number: 0,
                metadata: {some: 'metadata'}
              },
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/customers/CS9PL8eeo8aB",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"name\":\"Jorgelina Castro\",\"email\":\"asd@asd.com\",\"gateway_identifier\":\"string\",\"identification_type\":\"string\",\"identification_number\":0,\"metadata\":{\"some\":\"metadata\"}}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_...",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"name":"Jorgelina Castro","email":"asd@asd.com","gateway_identifier":"string","identification_type":"string","identification_number":0,"metadata":{"some":"metadata"}}');

            $request->setRequestUrl('https://api.tucuota.com/v1/customers/CS9PL8eeo8aB');
            $request->setRequestMethod('PUT');
            $request->setBody($body);

            $request->setHeaders([
              'content-type' => 'application/json',
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            payload = "{\"name\":\"Jorgelina Castro\",\"email\":\"asd@asd.com\",\"gateway_identifier\":\"string\",\"identification_type\":\"string\",\"identification_number\":0,\"metadata\":{\"some\":\"metadata\"}}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Bearer sk_live_..."
                }

            conn.request("PUT", "/v1/customers/CS9PL8eeo8aB", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.put("https://api.tucuota.com/v1/customers/CS9PL8eeo8aB")
              .header("content-type", "application/json")
              .header("Authorization", "Bearer sk_live_...")
              .body("{\"name\":\"Jorgelina Castro\",\"email\":\"asd@asd.com\",\"gateway_identifier\":\"string\",\"identification_type\":\"string\",\"identification_number\":0,\"metadata\":{\"some\":\"metadata\"}}")
              .asString();
      x-codegen-request-body-name: body
  '/v1/customers/{id}/actions/archive':
    post:
      operationId: CustomersArchiveCustomer
      summary: Archive a customer
      description: Archive the customer and cancel subscriptions and payments in process.
      parameters:
        - name: id
          in: path
          description: Hash or external ID.
          required: true
          schema:
            type: string
          example: CS9PL8eeo8aB
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                message: Archived successfully
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Not Found response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Record not found
                    title: Not Found
      tags:
        - Customers
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/customers/CS9PL8eeo8aB/actions/archive \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http POST https://api.tucuota.com/v1/customers/CS9PL8eeo8aB/actions/archive \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/customers/CS9PL8eeo8aB/actions/archive',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/customers/CS9PL8eeo8aB/actions/archive",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/customers/CS9PL8eeo8aB/actions/archive');
            $request->setRequestMethod('POST');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("POST", "/v1/customers/CS9PL8eeo8aB/actions/archive", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/customers/CS9PL8eeo8aB/actions/archive")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  '/v1/customers/{id}/actions/restore':
    post:
      operationId: CustomersRestoreCustomer
      summary: Restore a customer
      description: Immediately restore the customer.
      parameters:
        - name: id
          in: path
          description: Hash or external ID.
          required: true
          schema:
            type: string
          example: CS9PL8eeo8aB
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                message: Restored successfully
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Not Found response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Record not found
                    title: Not Found
      tags:
        - Customers
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/customers/CS9PL8eeo8aB/actions/restore \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http POST https://api.tucuota.com/v1/customers/CS9PL8eeo8aB/actions/restore \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/customers/CS9PL8eeo8aB/actions/restore',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/customers/CS9PL8eeo8aB/actions/restore",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/customers/CS9PL8eeo8aB/actions/restore');
            $request->setRequestMethod('POST');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("POST", "/v1/customers/CS9PL8eeo8aB/actions/restore", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/customers/CS9PL8eeo8aB/actions/restore")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  /v1/events:
    get:
      operationId: GetEvents
      summary: List events
      description: Returns a cursor-paginated list of your events.
      parameters:
        - name: page
          in: query
          description: Cursor value to paginate response.
          required: false
          schema:
            type: number
          example: 10
        - name: limit
          in: query
          description: Number of records to return.
          required: false
          schema:
            type: number
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                data:
                  - created_at: '2022-02-05T01:42:13-03:00'
                    data:
                      object:
                        created_at: '2022-02-05T01:42:13-03:00'
                        deleted_at: null
                        email: john@doe.com
                        gateway_identifier: 383473
                        id: CSnlZxyY3jwr
                        identification_number: null
                        identification_type: null
                        livemode: false
                        metadata: null
                        mobile_number: '5491154876503'
                        name: John Doe
                        updated_at: '2022-02-05T01:42:13-03:00'
                    delivered_at: '2022-02-11T20:11:38-03:00'
                    id: EVaX3JagwR6x
                    livemode: false
                    object: event
                    resource: customer
                    resource_id: CSnlZxyY3jwr
                    type: customer.created
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      required:
                        - created_at
                        - data
                        - delivered_at
                        - id
                        - livemode
                        - object
                        - resource
                        - resource_id
                        - type
                      type: object
                      properties:
                        id:
                          description: Unique identifier for the object.
                          type: string
                          maxLength: 5000
                        object:
                          type: string
                        created_at:
                          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          type: string
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                        data:
                          type: object
                          properties:
                            object:
                              description: Event object.
                              type: object
                          required:
                            - object
                        delivered_at:
                          description: 'Time at which the event was delivered. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                          oneOf:
                            - type: 'null'
                            - type: string
                        livemode:
                          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                          type: boolean
                        resource:
                          type: string
                          example: customer
                        resource_id:
                          type: string
                          example: CS12312d1d1dl
                        type:
                          type: string
                          example: customer.created
                  links:
                    description: Pagination metadata
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      last:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      next:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      prev:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                    title: Response Meta
                  meta:
                    description: Pagination metadata
                    type: object
                    properties:
                      current_page:
                        type: number
                        example: 1
                      from:
                        type: number
                        example: 1
                      last_page:
                        type: number
                        example: 28
                      per_page:
                        type: number
                        example: 1
                      to:
                        type: number
                        example: 1
                      total:
                        type: number
                        example: 2
                      path:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                    title: Response Meta
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Events
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://api.tucuota.com/v1/events?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE' \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET 'https://api.tucuota.com/v1/events?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE' \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/events',
              qs: {page: 'SOME_NUMBER_VALUE', limit: 'SOME_NUMBER_VALUE'},
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/events?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/events');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString([
              'page' => 'SOME_NUMBER_VALUE',
              'limit' => 'SOME_NUMBER_VALUE'
            ]));

            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/events?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/events?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  /v1/imports:
    get:
      operationId: GetImports
      summary: List Imports
      description: Returns a list of all your imports.
      parameters:
        - name: page
          in: query
          description: Cursor value to paginate response.
          required: false
          schema:
            type: number
          example: '10'
        - name: limit
          in: query
          description: Number of records to return.
          required: false
          schema:
            type: number
          example: '1'
        - name: search
          in: query
          description: Search.
          required: false
          schema:
            type: string
          example: foo@bar.com
        - name: status
          in: query
          description: 'Allowed values (`pending`, `ready`, `invalid`, `cancelled`, `processing`, `processed`).'
          required: false
          schema:
            type: string
          example: ready
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                data:
                  - id: IMKd7zlGJAna
                    type: customers
                    status: invalid
                    livemode: false
                    rows_count: 2
                    valid_rows_count: 0
                    invalid_rows_count: 2
                    created_at: '2020-11-20T02:38:14-0300'
                    updated_at: '2020-11-20T02:38:14-0300'
                    invalid_at: '2020-11-20T02:38:14-0300'
                  - id: IMGdOz9vReVZ
                    type: customers
                    status: ready
                    livemode: false
                    rows_count: 2
                    valid_rows_count: 2
                    invalid_rows_count: 0
                    created_at: '2020-11-20T02:37:48-0300'
                    updated_at: '2020-11-20T02:37:49-0300'
                    ready_at: '2020-11-20T02:37:49-0300'
                links:
                  first: 'https://tucuota.com/api/imports?page=1'
                  last: 'https://tucuota.com/api/imports?page=1'
                meta:
                  current_page: 1
                  from: 1
                  last_page: 1
                  path: 'https://tucuota.com/api/imports'
                  per_page: 25
                  to: 2
                  total: 2
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Imports
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://api.tucuota.com/v1/imports?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE&status=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET 'https://api.tucuota.com/v1/imports?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE&status=SOME_STRING_VALUE' \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/imports',
              qs: {
                page: 'SOME_NUMBER_VALUE',
                limit: 'SOME_NUMBER_VALUE',
                search: 'SOME_STRING_VALUE',
                status: 'SOME_STRING_VALUE'
              },
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/imports?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE&status=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/imports');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString([
              'page' => 'SOME_NUMBER_VALUE',
              'limit' => 'SOME_NUMBER_VALUE',
              'search' => 'SOME_STRING_VALUE',
              'status' => 'SOME_STRING_VALUE'
            ]));

            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/imports?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE&status=SOME_STRING_VALUE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/imports?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE&status=SOME_STRING_VALUE")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
    post:
      operationId: PostImport
      summary: Create a import
      description: Create a import
      requestBody:
        content:
          application/json:
            encoding:
              metadata:
                explode: true
                style: deepObject
            example:
              type: customers
              filename: a.csv
              original_filename: a.csv
              auto: true
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: customers
                filename:
                  type: string
                  example: a.csv
                original_filename:
                  type: string
                  example: a.csv
                auto:
                  type: boolean
                  example: true
                metadata:
                  description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                  example:
                    some: metadata
                  anyOf:
                    - additionalProperties:
                        type: string
                      type: object
                    - enum:
                        - ''
                      type: string
                    - type: 'null'
              additionalProperties: false
        required: true
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents an import of your account.
                    type: object
                    properties:
                      id:
                        description: Unique identifier for the object.
                        type: string
                        example: IM129038120h
                        maxLength: 5000
                      batch_job:
                        type: object
                      cancelled_at:
                        description: 'Time at which the import was marked as cancelled. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      invalid_at:
                        description: 'Time at which the import was marked as invalid. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      processed_at:
                        description: 'Time at which the import was marked as processed. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      ready_at:
                        description: 'Time at which the import was marked as ready. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      invalid_rows_count:
                        description: Invalid Rows Count
                        type: number
                        example: 0
                      valid_rows_count:
                        description: Valid Rows Count
                        type: number
                        example: 0
                      rows_count:
                        description: Rows Count
                        type: number
                        example: 0
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      original_filename:
                        type: string
                        example: subscriptions-import-template.csv
                      type:
                        description: Import Type
                        type: string
                        example: subscriptions
                      status:
                        description: Import Status
                        type: string
                        example: processed
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                    title: Import
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                errors:
                  email:
                    - El email es inválido.
                message: The given data was invalid.
      tags:
        - Imports
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/imports \
              --header 'Authorization: Bearer sk_live_...' \
              --header 'content-type: application/json' \
              --data '{"type":"customers","filename":"a.csv","original_filename":"a.csv","auto":true,"metadata":{"some":"metadata"}}'
        - lang: Shell + Httpie
          source: |-
            echo '{"type":"customers","filename":"a.csv","original_filename":"a.csv","auto":true,"metadata":{"some":"metadata"}}' |  \
              http POST https://api.tucuota.com/v1/imports \
              Authorization:'Bearer sk_live_...' \
              content-type:application/json
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/imports',
              headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer sk_live_...'
              },
              body: {
                type: 'customers',
                filename: 'a.csv',
                original_filename: 'a.csv',
                auto: true,
                metadata: {some: 'metadata'}
              },
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/imports",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"type\":\"customers\",\"filename\":\"a.csv\",\"original_filename\":\"a.csv\",\"auto\":true,\"metadata\":{\"some\":\"metadata\"}}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_...",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"type":"customers","filename":"a.csv","original_filename":"a.csv","auto":true,"metadata":{"some":"metadata"}}');

            $request->setRequestUrl('https://api.tucuota.com/v1/imports');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $request->setHeaders([
              'content-type' => 'application/json',
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            payload = "{\"type\":\"customers\",\"filename\":\"a.csv\",\"original_filename\":\"a.csv\",\"auto\":true,\"metadata\":{\"some\":\"metadata\"}}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Bearer sk_live_..."
                }

            conn.request("POST", "/v1/imports", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/imports")
              .header("content-type", "application/json")
              .header("Authorization", "Bearer sk_live_...")
              .body("{\"type\":\"customers\",\"filename\":\"a.csv\",\"original_filename\":\"a.csv\",\"auto\":true,\"metadata\":{\"some\":\"metadata\"}}")
              .asString();
      x-codegen-request-body-name: body
  '/v1/imports/{id}':
    get:
      operationId: ImportsGetImport
      summary: Retrieve a import.
      description: Retrieve a import.
      parameters:
        - name: id
          in: path
          description: Import ID.
          required: true
          schema:
            type: string
          example: IMKd7zlGJAna
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents an import of your account.
                    type: object
                    properties:
                      id:
                        description: Unique identifier for the object.
                        type: string
                        example: IM129038120h
                        maxLength: 5000
                      batch_job:
                        type: object
                      cancelled_at:
                        description: 'Time at which the import was marked as cancelled. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      invalid_at:
                        description: 'Time at which the import was marked as invalid. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      processed_at:
                        description: 'Time at which the import was marked as processed. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      ready_at:
                        description: 'Time at which the import was marked as ready. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      invalid_rows_count:
                        description: Invalid Rows Count
                        type: number
                        example: 0
                      valid_rows_count:
                        description: Valid Rows Count
                        type: number
                        example: 0
                      rows_count:
                        description: Rows Count
                        type: number
                        example: 0
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      original_filename:
                        type: string
                        example: subscriptions-import-template.csv
                      type:
                        description: Import Type
                        type: string
                        example: subscriptions
                      status:
                        description: Import Status
                        type: string
                        example: processed
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                    title: Import
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Not Found response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Record not found
                    title: Not Found
      tags:
        - Imports
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://api.tucuota.com/v1/imports/IMKd7zlGJAna \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET https://api.tucuota.com/v1/imports/IMKd7zlGJAna \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/imports/IMKd7zlGJAna',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/imports/IMKd7zlGJAna",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/imports/IMKd7zlGJAna');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/imports/IMKd7zlGJAna", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/imports/IMKd7zlGJAna")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  '/v1/imports/{id}/rows':
    get:
      operationId: ImportsListImportRows
      summary: List Import Rows
      parameters:
        - name: id
          in: path
          description: Import ID.
          required: true
          schema:
            type: string
          example: IMKd7zlGJAna
        - name: page
          in: query
          description: Cursor value to paginate response.
          schema:
            type: number
          example: '10'
        - name: limit
          in: query
          description: Number of records to return.
          schema:
            type: number
          example: '1'
        - name: filter
          in: query
          description: |
            **Validation**. _Example: valid_. Allows values: valid, invalid.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                data: []
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Imports
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://api.tucuota.com/v1/imports/IMKd7zlGJAna/rows?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&filter=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET 'https://api.tucuota.com/v1/imports/IMKd7zlGJAna/rows?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&filter=SOME_STRING_VALUE' \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/imports/IMKd7zlGJAna/rows',
              qs: {
                page: 'SOME_NUMBER_VALUE',
                limit: 'SOME_NUMBER_VALUE',
                filter: 'SOME_STRING_VALUE'
              },
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/imports/IMKd7zlGJAna/rows?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&filter=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/imports/IMKd7zlGJAna/rows');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString([
              'page' => 'SOME_NUMBER_VALUE',
              'limit' => 'SOME_NUMBER_VALUE',
              'filter' => 'SOME_STRING_VALUE'
            ]));

            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/imports/IMKd7zlGJAna/rows?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&filter=SOME_STRING_VALUE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/imports/IMKd7zlGJAna/rows?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&filter=SOME_STRING_VALUE")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  /v1/links:
    get:
      operationId: LinksGetLinks
      summary: List links
      description: Returns a list of all your links.
      parameters:
        - name: page
          in: query
          description: Cursor value to paginate response.
          required: false
          schema:
            type: number
          example: '10'
        - name: limit
          in: query
          description: Number of records to return.
          required: false
          schema:
            type: number
          example: '1'
        - name: search
          in: query
          description: Search.
          required: false
          schema:
            type: string
          example: foo@bar.com
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      title: Link
                      description: This object represents a public link of your organization.
                      type: object
                      properties:
                        id:
                          description: Unique identifier for the object.
                          type: string
                          example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
                          maxLength: 5000
                        livemode:
                          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                          type: boolean
                        metadata:
                          description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                          example:
                            some: metadata
                          anyOf:
                            - additionalProperties:
                                type: string
                              type: object
                            - enum:
                                - ''
                              type: string
                            - type: 'null'
                        created_at:
                          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          type: string
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                        updated_at:
                          description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          type: string
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                        deleted_at:
                          description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                          oneOf:
                            - type: 'null'
                            - type: string
                  links:
                    description: Pagination metadata
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      last:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      next:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      prev:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                    title: Response Meta
                  meta:
                    description: Pagination metadata
                    type: object
                    properties:
                      current_page:
                        type: number
                        example: 1
                      from:
                        type: number
                        example: 1
                      last_page:
                        type: number
                        example: 28
                      per_page:
                        type: number
                        example: 1
                      to:
                        type: number
                        example: 1
                      total:
                        type: number
                        example: 2
                      path:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                    title: Response Meta
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Links
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://api.tucuota.com/v1/links?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET 'https://api.tucuota.com/v1/links?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE' \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/links',
              qs: {
                page: 'SOME_NUMBER_VALUE',
                limit: 'SOME_NUMBER_VALUE',
                search: 'SOME_STRING_VALUE'
              },
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/links?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/links');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString([
              'page' => 'SOME_NUMBER_VALUE',
              'limit' => 'SOME_NUMBER_VALUE',
              'search' => 'SOME_STRING_VALUE'
            ]));

            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/links?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/links?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
    post:
      operationId: LinksCreateLink
      summary: Create a link.
      description: Create a link.
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a public link of your organization.
                    type: object
                    properties:
                      id:
                        description: Unique identifier for the object.
                        type: string
                        example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
                        maxLength: 5000
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      deleted_at:
                        description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                        oneOf:
                          - type: 'null'
                          - type: string
                    title: Link
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Links
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/links \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http POST https://api.tucuota.com/v1/links \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/links',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/links",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/links');
            $request->setRequestMethod('POST');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("POST", "/v1/links", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/links")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  '/v1/links/{id}':
    get:
      operationId: LinksGetLink
      summary: Retrieve a link.
      description: Retrieve a link.
      parameters:
        - name: id
          in: path
          description: Link ID.
          required: true
          schema:
            type: string
          example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a public link of your organization.
                    type: object
                    properties:
                      id:
                        description: Unique identifier for the object.
                        type: string
                        example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
                        maxLength: 5000
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      deleted_at:
                        description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                        oneOf:
                          - type: 'null'
                          - type: string
                    title: Link
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Links
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://api.tucuota.com/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET https://api.tucuota.com/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
    put:
      operationId: LinksUpdateLink
      summary: Update a link
      description: Updates a link.
      parameters:
        - name: id
          in: path
          description: Link ID.
          required: true
          schema:
            type: string
          example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a public link of your organization.
                    type: object
                    properties:
                      id:
                        description: Unique identifier for the object.
                        type: string
                        example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
                        maxLength: 5000
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      deleted_at:
                        description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                        oneOf:
                          - type: 'null'
                          - type: string
                    title: Link
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                errors:
                  title:
                    - title is required.
                message: The given data was invalid.
      tags:
        - Links
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request PUT \
              --url https://api.tucuota.com/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http PUT https://api.tucuota.com/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'PUT',
              url: 'https://api.tucuota.com/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc');
            $request->setRequestMethod('PUT');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("PUT", "/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.put("https://api.tucuota.com/v1/links/43751655-7580-4bd7-8bad-3c54ed1c4abc")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  /v1/mandates:
    get:
      operationId: GetMandates
      summary: List all mandates
      description: By default newest mandates will be first on the list.
      parameters:
        - name: page
          in: query
          description: Cursor value to paginate response.
          schema:
            type: number
          example: '10'
        - name: limit
          in: query
          description: Number of records to return.
          schema:
            type: number
          example: '1'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      title: Mandate
                      description: This object represents a mandate of your organization.
                      type: object
                      properties:
                        id:
                          description: Unique identifier for the object.
                          type: string
                          example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
                          maxLength: 5000
                        livemode:
                          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                          type: boolean
                        metadata:
                          description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                          example:
                            some: metadata
                          anyOf:
                            - additionalProperties:
                                type: string
                              type: object
                            - enum:
                                - ''
                              type: string
                            - type: 'null'
                        created_at:
                          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          type: string
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                        updated_at:
                          description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          type: string
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                        deleted_at:
                          description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                          oneOf:
                            - type: 'null'
                            - type: string
                        customer:
                          description: This object represents a customer of your organization.
                          type: object
                          properties:
                            id:
                              description: Unique identifier for the object.
                              type: string
                              example: CSljikas98
                              maxLength: 5000
                            name:
                              description: The customer's full name or business name.
                              type: string
                              example: Jorgelina Castro
                            email:
                              description: The customer's email address.
                              type: string
                              example: asd@asd.com
                            livemode:
                              description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                              type: boolean
                            metadata:
                              description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                              example:
                                some: metadata
                              anyOf:
                                - additionalProperties:
                                    type: string
                                  type: object
                                - enum:
                                    - ''
                                  type: string
                                - type: 'null'
                            mobile_number:
                              example: '5491164531234'
                              oneOf:
                                - type: 'null'
                                - type: string
                            gateway_identifier:
                              type: integer
                              format: int32
                              example: 383473
                            identification_number:
                              example: 15.555.324
                              oneOf:
                                - type: 'null'
                                - type: string
                            identification_type:
                              example: DNI
                              oneOf:
                                - type: 'null'
                                - type: string
                            created_at:
                              description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                              type: string
                              format: date-time
                              example: '2022-02-11T23:19:22-03:00'
                            updated_at:
                              description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                              type: string
                              format: date-time
                              example: '2022-02-11T23:19:22-03:00'
                            active_subscriptions_count:
                              type: integer
                              format: int32
                              example: 0
                            active_subscriptions_sum:
                              type: integer
                              format: int32
                              example: 0
                            approved_payments_count:
                              type: integer
                              format: int32
                              example: 0
                            approved_payments_sum:
                              type: integer
                              format: int32
                              example: 0
                            cancelled_subscriptions_count:
                              type: integer
                              format: int32
                              example: 0
                            paused_subscriptions_count:
                              type: integer
                              format: int32
                              example: 0
                            rejected_payments_count:
                              type: integer
                              format: int32
                              example: 0
                            rejected_payments_sum:
                              type: integer
                              format: int32
                              example: 0
                            finished_subscriptions_count:
                              type: integer
                              format: int32
                              example: 0
                            deleted_at:
                              description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                              format: date-time
                              example: '2022-02-11T23:19:22-03:00'
                              oneOf:
                                - type: 'null'
                                - type: string
                          title: Customer
                        payment_method:
                          type: object
                          properties:
                            type:
                              description: 'One of: cbu, card.'
                              type: string
                            card:
                              type: object
                              properties:
                                bank:
                                  type: string
                                brand:
                                  type: string
                                  example: visa-credito
                                country:
                                  type: string
                                  example: AR
                                expiration_month:
                                  type: number
                                expiration_year:
                                  type: number
                                fingerprint:
                                  type: string
                                last_four_digits:
                                  type: string
                            cbu:
                              type: object
                              properties:
                                bank:
                                  type: string
                                country:
                                  type: string
                                fingerprint:
                                  type: string
                                last_four_digits:
                                  type: string
                            created_at:
                              type: string
                            id:
                              type: string
                            livemode:
                              type: boolean
                            object:
                              type: string
                            updated_at:
                              type: string
                  links:
                    description: Pagination metadata
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      last:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      next:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      prev:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                    title: Response Meta
                  meta:
                    description: Pagination metadata
                    type: object
                    properties:
                      current_page:
                        type: number
                        example: 1
                      from:
                        type: number
                        example: 1
                      last_page:
                        type: number
                        example: 28
                      per_page:
                        type: number
                        example: 1
                      to:
                        type: number
                        example: 1
                      total:
                        type: number
                        example: 2
                      path:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                    title: Response Meta
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Mandates
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://api.tucuota.com/v1/mandates?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE' \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET 'https://api.tucuota.com/v1/mandates?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE' \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/mandates',
              qs: {page: 'SOME_NUMBER_VALUE', limit: 'SOME_NUMBER_VALUE'},
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/mandates?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/mandates');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString([
              'page' => 'SOME_NUMBER_VALUE',
              'limit' => 'SOME_NUMBER_VALUE'
            ]));

            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/mandates?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/mandates?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
    post:
      operationId: MandatesPostMandate
      summary: Create a mandate
      description: Create a mandate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_id:
                  type: string
                payment_method_number:
                  type: string
              example:
                customer_id: CS3oDRqz9wzB
                payment_method_number: 4024007127322104
        required: false
      responses:
        '201':
          description: Created
          content:
            application/json:
              example:
                data:
                  id: 3d48eb80-a5a3-11ea-8439-bdd053d1a65b
                  object: mandate
                  livemode: false
                  status: active
                  created_at: '2020-06-03T11:05:11-0300'
                  updated_at: '2020-06-03T11:05:11-0300'
                  customer:
                    id: CS3oDRqz9wzB
                    object: customer
                    gateway_identifier: '1234'
                    name: John
                    email: john@doe.com
                    identification_type: ''
                    identification_number: ''
                    mobile_number: ''
                    livemode: false
                    updated_at: '2020-06-03T11:05:11-0300'
                    created_at: '2020-06-03T11:05:11-0300'
                  payment_method:
                    id: PMyYW9rJ3alN
                    object: payment_method
                    last_four_digits: '2104'
                    brand: visa-credito
                    bank: ''
                    livemode: false
                    updated_at: '2020-06-03T11:05:11-0300'
                    created_at: '2020-06-03T11:05:11-0300'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Mandates
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/mandates \
              --header 'Authorization: Bearer sk_live_...' \
              --header 'content-type: application/json' \
              --data '{"customer_id":"CS3oDRqz9wzB","payment_method_number":"4024007127322104"}'
        - lang: Shell + Httpie
          source: |-
            echo '{"customer_id":"CS3oDRqz9wzB","payment_method_number":"4024007127322104"}' |  \
              http POST https://api.tucuota.com/v1/mandates \
              Authorization:'Bearer sk_live_...' \
              content-type:application/json
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/mandates',
              headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer sk_live_...'
              },
              body: {customer_id: 'CS3oDRqz9wzB', payment_method_number: 4024007127322104},
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/mandates",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"customer_id\":\"CS3oDRqz9wzB\",\"payment_method_number\":\"4024007127322104\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_...",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"customer_id":"CS3oDRqz9wzB","payment_method_number":"4024007127322104"}');

            $request->setRequestUrl('https://api.tucuota.com/v1/mandates');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $request->setHeaders([
              'content-type' => 'application/json',
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            payload = "{\"customer_id\":\"CS3oDRqz9wzB\",\"payment_method_number\":\"4024007127322104\"}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Bearer sk_live_..."
                }

            conn.request("POST", "/v1/mandates", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/mandates")
              .header("content-type", "application/json")
              .header("Authorization", "Bearer sk_live_...")
              .body("{\"customer_id\":\"CS3oDRqz9wzB\",\"payment_method_number\":\"4024007127322104\"}")
              .asString();
      x-codegen-request-body-name: body
  '/v1/mandates/{id}':
    get:
      operationId: MandatesGetMandate
      summary: Retrieve a mandate
      description: Retrieve a mandate
      parameters:
        - name: id
          in: path
          description: Mandate ID.
          required: true
          schema:
            type: string
          example: 85641980-8a28-11ea-a926-d51efa41533d
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a mandate of your organization.
                    type: object
                    properties:
                      id:
                        description: Unique identifier for the object.
                        type: string
                        example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
                        maxLength: 5000
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      deleted_at:
                        description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                        oneOf:
                          - type: 'null'
                          - type: string
                      customer:
                        description: This object represents a customer of your organization.
                        type: object
                        properties:
                          id:
                            description: Unique identifier for the object.
                            type: string
                            example: CSljikas98
                            maxLength: 5000
                          name:
                            description: The customer's full name or business name.
                            type: string
                            example: Jorgelina Castro
                          email:
                            description: The customer's email address.
                            type: string
                            example: asd@asd.com
                          livemode:
                            description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                            type: boolean
                          metadata:
                            description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                            example:
                              some: metadata
                            anyOf:
                              - additionalProperties:
                                  type: string
                                type: object
                              - enum:
                                  - ''
                                type: string
                              - type: 'null'
                          mobile_number:
                            example: '5491164531234'
                            oneOf:
                              - type: 'null'
                              - type: string
                          gateway_identifier:
                            type: integer
                            format: int32
                            example: 383473
                          identification_number:
                            example: 15.555.324
                            oneOf:
                              - type: 'null'
                              - type: string
                          identification_type:
                            example: DNI
                            oneOf:
                              - type: 'null'
                              - type: string
                          created_at:
                            description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          updated_at:
                            description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          active_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          active_subscriptions_sum:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          cancelled_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          paused_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          finished_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          deleted_at:
                            description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                            oneOf:
                              - type: 'null'
                              - type: string
                        title: Customer
                      payment_method:
                        type: object
                        properties:
                          type:
                            description: 'One of: cbu, card.'
                            type: string
                          card:
                            type: object
                            properties:
                              bank:
                                type: string
                              brand:
                                type: string
                                example: visa-credito
                              country:
                                type: string
                                example: AR
                              expiration_month:
                                type: number
                              expiration_year:
                                type: number
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          cbu:
                            type: object
                            properties:
                              bank:
                                type: string
                              country:
                                type: string
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          created_at:
                            type: string
                          id:
                            type: string
                          livemode:
                            type: boolean
                          object:
                            type: string
                          updated_at:
                            type: string
                    title: Mandate
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Not Found response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Record not found
                    title: Not Found
      tags:
        - Mandates
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  '/v1/mandates/{id}/actions/revoke':
    post:
      operationId: MandatesRevokeMandate
      summary: Revoke mandate
      description: This action will revoke the mandate and also cancel all the cancellable subscriptions attached to the same `customer` and `payment method`.
      parameters:
        - name: id
          in: path
          description: Mandate ID.
          required: true
          schema:
            type: string
          example: 85641980-8a28-11ea-a926-d51efa41533d
      responses:
        '202':
          description: Accepted
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Mandates
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/revoke \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http POST https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/revoke \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/revoke',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/revoke",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/revoke');
            $request->setRequestMethod('POST');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("POST", "/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/revoke", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/revoke")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  '/v1/mandates/{id}/actions/restore':
    post:
      operationId: MandatesRestoreMandate
      summary: Restore mandate
      description: This action will restore the revoked mandate.
      parameters:
        - name: id
          in: path
          description: Mandate ID.
          required: true
          schema:
            type: string
          example: 85641980-8a28-11ea-a926-d51efa41533d
      responses:
        '202':
          description: Accepted
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Mandates
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/restore \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http POST https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/restore \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/restore',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/restore",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/restore');
            $request->setRequestMethod('POST');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("POST", "/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/restore", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/mandates/85641980-8a28-11ea-a926-d51efa41533d/actions/restore")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  /v1/payments:
    get:
      operationId: PaymentsGetPayments
      summary: List payments
      description: Newest payments will be first on the list.
      parameters:
        - name: page
          in: query
          description: Cursor value to paginate response.
          required: false
          schema:
            type: number
          example: '10'
        - name: limit
          in: query
          description: Number of records to return.
          required: false
          schema:
            type: number
          example: '1'
        - name: search
          in: query
          description: Search.
          schema:
            type: string
          example: foo@bar.com
        - name: customer_id
          in: query
          description: Show only payment methods from a given customer.
          required: false
          schema:
            type: string
          example: CS9PL8eeo8aB
        - name: subscription_id
          in: query
          description: Show only payment methods from a given subscription.
          required: false
          schema:
            type: string
          example: SBmX1MrZ77Mwq3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      title: Subscription
                      description: This object represents a subscription of your organization.
                      type: object
                      properties:
                        created_at:
                          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          type: string
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                        currency:
                          type: string
                        approved_payments_count:
                          type: number
                        approved_payments_sum:
                          type: number
                        customer:
                          description: This object represents a customer of your organization.
                          type: object
                          properties:
                            id:
                              description: Unique identifier for the object.
                              type: string
                              example: CSljikas98
                              maxLength: 5000
                            name:
                              description: The customer's full name or business name.
                              type: string
                              example: Jorgelina Castro
                            email:
                              description: The customer's email address.
                              type: string
                              example: asd@asd.com
                            livemode:
                              description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                              type: boolean
                            metadata:
                              description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                              example:
                                some: metadata
                              anyOf:
                                - additionalProperties:
                                    type: string
                                  type: object
                                - enum:
                                    - ''
                                  type: string
                                - type: 'null'
                            mobile_number:
                              example: '5491164531234'
                              oneOf:
                                - type: 'null'
                                - type: string
                            gateway_identifier:
                              type: integer
                              format: int32
                              example: 383473
                            identification_number:
                              example: 15.555.324
                              oneOf:
                                - type: 'null'
                                - type: string
                            identification_type:
                              example: DNI
                              oneOf:
                                - type: 'null'
                                - type: string
                            created_at:
                              description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                              type: string
                              format: date-time
                              example: '2022-02-11T23:19:22-03:00'
                            updated_at:
                              description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                              type: string
                              format: date-time
                              example: '2022-02-11T23:19:22-03:00'
                            active_subscriptions_count:
                              type: integer
                              format: int32
                              example: 0
                            active_subscriptions_sum:
                              type: integer
                              format: int32
                              example: 0
                            approved_payments_count:
                              type: integer
                              format: int32
                              example: 0
                            approved_payments_sum:
                              type: integer
                              format: int32
                              example: 0
                            cancelled_subscriptions_count:
                              type: integer
                              format: int32
                              example: 0
                            paused_subscriptions_count:
                              type: integer
                              format: int32
                              example: 0
                            rejected_payments_count:
                              type: integer
                              format: int32
                              example: 0
                            rejected_payments_sum:
                              type: integer
                              format: int32
                              example: 0
                            finished_subscriptions_count:
                              type: integer
                              format: int32
                              example: 0
                            deleted_at:
                              description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                              format: date-time
                              example: '2022-02-11T23:19:22-03:00'
                              oneOf:
                                - type: 'null'
                                - type: string
                          title: Customer
                        first_date:
                          type: string
                        id:
                          type: string
                        livemode:
                          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                          type: boolean
                        metadata:
                          description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                          example:
                            some: metadata
                          anyOf:
                            - additionalProperties:
                                type: string
                              type: object
                            - enum:
                                - ''
                              type: string
                            - type: 'null'
                        object:
                          type: string
                        payment_method:
                          type: object
                          properties:
                            type:
                              description: 'One of: cbu, card.'
                              type: string
                            card:
                              type: object
                              properties:
                                bank:
                                  type: string
                                brand:
                                  type: string
                                  example: visa-credito
                                country:
                                  type: string
                                  example: AR
                                expiration_month:
                                  type: number
                                expiration_year:
                                  type: number
                                fingerprint:
                                  type: string
                                last_four_digits:
                                  type: string
                            cbu:
                              type: object
                              properties:
                                bank:
                                  type: string
                                country:
                                  type: string
                                fingerprint:
                                  type: string
                                last_four_digits:
                                  type: string
                            created_at:
                              type: string
                            id:
                              type: string
                            livemode:
                              type: boolean
                            object:
                              type: string
                            updated_at:
                              type: string
                        rejected_payments_count:
                          type: number
                        rejected_payments_sum:
                          type: number
                        start_date:
                          type: string
                        status:
                          type: string
                        upcoming_dates:
                          type: array
                          items:
                            type: object
                        updated_at:
                          description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          type: string
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                  links:
                    description: Pagination metadata
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      last:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      next:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      prev:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                    title: Response Meta
                  meta:
                    description: Pagination metadata
                    type: object
                    properties:
                      current_page:
                        type: number
                        example: 1
                      from:
                        type: number
                        example: 1
                      last_page:
                        type: number
                        example: 28
                      per_page:
                        type: number
                        example: 1
                      to:
                        type: number
                        example: 1
                      total:
                        type: number
                        example: 2
                      path:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                    title: Response Meta
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Payments
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://api.tucuota.com/v1/payments?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE&customer_id=SOME_STRING_VALUE&subscription_id=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET 'https://api.tucuota.com/v1/payments?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE&customer_id=SOME_STRING_VALUE&subscription_id=SOME_STRING_VALUE' \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/payments',
              qs: {
                page: 'SOME_NUMBER_VALUE',
                limit: 'SOME_NUMBER_VALUE',
                search: 'SOME_STRING_VALUE',
                customer_id: 'SOME_STRING_VALUE',
                subscription_id: 'SOME_STRING_VALUE'
              },
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/payments?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE&customer_id=SOME_STRING_VALUE&subscription_id=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/payments');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString([
              'page' => 'SOME_NUMBER_VALUE',
              'limit' => 'SOME_NUMBER_VALUE',
              'search' => 'SOME_STRING_VALUE',
              'customer_id' => 'SOME_STRING_VALUE',
              'subscription_id' => 'SOME_STRING_VALUE'
            ]));

            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/payments?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE&customer_id=SOME_STRING_VALUE&subscription_id=SOME_STRING_VALUE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/payments?page=SOME_NUMBER_VALUE&limit=SOME_NUMBER_VALUE&search=SOME_STRING_VALUE&customer_id=SOME_STRING_VALUE&subscription_id=SOME_STRING_VALUE")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
    post:
      operationId: PaymentsCreatePayment
      summary: Create a customer
      description: Create a payment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  description: The amount of the payment.
                  type: number
                description:
                  description: The title of the payment.
                  type: string
                customer_id:
                  description: |
                    [Customer ID](#tag/Customers).
                  type: string
                  example: CSgaZlLaPMZO.
                payment_method_id:
                  description: 'The [token of the card or cbu](#tag/PaymentMethods) for this payment.'
                  type: string
                charge_date:
                  description: 'A future date on which the payment should be collected. If not specified, the payment will be collected as soon as possible.'
                  type: string
                  format: date
                can_auto_retry_until:
                  description: The maximum date the payment could be retried automatically.
                  type: string
                  format: date
                auto_retries_max_attempts:
                  description: The maximum amount of times the payment could be retried automatically.
                  type: integer
                gateway_identifier:
                  description: Gateway identifier for your payment.
                  type: string
                metadata:
                  description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                  example:
                    some: metadata
                  anyOf:
                    - additionalProperties:
                        type: string
                      type: object
                    - enum:
                        - ''
                      type: string
                    - type: 'null'
              example:
                amount: 100
                description: Unique payment
                gateway_identifier: '001234'
                customer_id: CSr7Dg3LkDP2
                payment_method_number: 4024007127322104
              required:
                - amount
                - description
                - customer_id
                - payment_method_id
        required: false
      responses:
        '201':
          description: Payment created.
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Payments
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/payments \
              --header 'Authorization: Bearer sk_live_...' \
              --header 'content-type: application/json' \
              --data '{"amount":100,"description":"Unique payment","gateway_identifier":"001234","customer_id":"CSr7Dg3LkDP2","payment_method_number":"4024007127322104"}'
        - lang: Shell + Httpie
          source: |-
            echo '{"amount":100,"description":"Unique payment","gateway_identifier":"001234","customer_id":"CSr7Dg3LkDP2","payment_method_number":"4024007127322104"}' |  \
              http POST https://api.tucuota.com/v1/payments \
              Authorization:'Bearer sk_live_...' \
              content-type:application/json
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/payments',
              headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer sk_live_...'
              },
              body: {
                amount: 100,
                description: 'Unique payment',
                gateway_identifier: '001234',
                customer_id: 'CSr7Dg3LkDP2',
                payment_method_number: 4024007127322104
              },
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/payments",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"amount\":100,\"description\":\"Unique payment\",\"gateway_identifier\":\"001234\",\"customer_id\":\"CSr7Dg3LkDP2\",\"payment_method_number\":\"4024007127322104\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_...",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"amount":100,"description":"Unique payment","gateway_identifier":"001234","customer_id":"CSr7Dg3LkDP2","payment_method_number":"4024007127322104"}');

            $request->setRequestUrl('https://api.tucuota.com/v1/payments');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $request->setHeaders([
              'content-type' => 'application/json',
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            payload = "{\"amount\":100,\"description\":\"Unique payment\",\"gateway_identifier\":\"001234\",\"customer_id\":\"CSr7Dg3LkDP2\",\"payment_method_number\":\"4024007127322104\"}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Bearer sk_live_..."
                }

            conn.request("POST", "/v1/payments", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/payments")
              .header("content-type", "application/json")
              .header("Authorization", "Bearer sk_live_...")
              .body("{\"amount\":100,\"description\":\"Unique payment\",\"gateway_identifier\":\"001234\",\"customer_id\":\"CSr7Dg3LkDP2\",\"payment_method_number\":\"4024007127322104\"}")
              .asString();
      x-codegen-request-body-name: body
  '/v1/payments/{id}':
    get:
      operationId: PaymentsGetPayment
      summary: Retrieve a payment
      description: Retrieve a payment.
      parameters:
        - name: id
          in: path
          description: Payment ID.
          required: true
          schema:
            type: string
          example: PYdOz9bgVReV
      responses:
        '200':
          description: Retrieve a payment.
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
        '404':
          description: Payment not found
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Not Found response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Record not found
                    title: Not Found
      tags:
        - Payments
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://api.tucuota.com/v1/payments/PYdOz9bgVReV \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET https://api.tucuota.com/v1/payments/PYdOz9bgVReV \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/payments/PYdOz9bgVReV',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/payments/PYdOz9bgVReV",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/payments/PYdOz9bgVReV');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/payments/PYdOz9bgVReV", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/payments/PYdOz9bgVReV")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
    put:
      operationId: PaymentsUpdatePayment
      summary: Update a payment
      description: Update a payment.
      parameters:
        - name: id
          in: path
          description: Payment ID.
          required: true
          schema:
            type: string
          example: PYdOz9bgVReV
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  description: The new amount of the payment.
                  type: number
                auto_retries_max_attempts:
                  description: The maximum amount of times the payment could be retried automatically.
                  type: integer
                can_auto_retry_until:
                  description: The maximum date the payment could be retried automatically.
                  type: string
                  format: date
                charge_date:
                  description: A future date on which the payment should be collected.
                  type: string
                  format: date
                description:
                  description: The new title of the payment.
                  type: string
                payment_method_id:
                  description: The token of the card or cbu for the payment.
                  type: string
                metadata:
                  description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                  example:
                    some: metadata
                  anyOf:
                    - additionalProperties:
                        type: string
                      type: object
                    - enum:
                        - ''
                      type: string
                    - type: 'null'
              example:
                description: New payment title
        required: true
      responses:
        '200':
          description: Payment updated
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Payments
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request PUT \
              --url https://api.tucuota.com/v1/payments/PYdOz9bgVReV \
              --header 'Authorization: Bearer sk_live_...' \
              --header 'content-type: application/json' \
              --data '{"description":"New payment title"}'
        - lang: Shell + Httpie
          source: |-
            echo '{"description":"New payment title"}' |  \
              http PUT https://api.tucuota.com/v1/payments/PYdOz9bgVReV \
              Authorization:'Bearer sk_live_...' \
              content-type:application/json
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'PUT',
              url: 'https://api.tucuota.com/v1/payments/PYdOz9bgVReV',
              headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer sk_live_...'
              },
              body: {description: 'New payment title'},
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/payments/PYdOz9bgVReV",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"description\":\"New payment title\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_...",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"description":"New payment title"}');

            $request->setRequestUrl('https://api.tucuota.com/v1/payments/PYdOz9bgVReV');
            $request->setRequestMethod('PUT');
            $request->setBody($body);

            $request->setHeaders([
              'content-type' => 'application/json',
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            payload = "{\"description\":\"New payment title\"}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Bearer sk_live_..."
                }

            conn.request("PUT", "/v1/payments/PYdOz9bgVReV", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.put("https://api.tucuota.com/v1/payments/PYdOz9bgVReV")
              .header("content-type", "application/json")
              .header("Authorization", "Bearer sk_live_...")
              .body("{\"description\":\"New payment title\"}")
              .asString();
      x-codegen-request-body-name: body
  '/v1/payments/{id}/actions/cancel':
    post:
      operationId: PaymentsCancelPayment
      summary: Cancel payment
      description: Cancel payment.
      parameters:
        - name: id
          in: path
          description: Payment ID.
          required: true
          schema:
            type: string
          example: PYdOz9bgVReV
      responses:
        '201':
          description: Created
          content:
            application/json:
              example:
                message: Cancelled successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Payments
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/payments/PYdOz9bgVReV/actions/cancel \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http POST https://api.tucuota.com/v1/payments/PYdOz9bgVReV/actions/cancel \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/payments/PYdOz9bgVReV/actions/cancel',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/payments/PYdOz9bgVReV/actions/cancel",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/payments/PYdOz9bgVReV/actions/cancel');
            $request->setRequestMethod('POST');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("POST", "/v1/payments/PYdOz9bgVReV/actions/cancel", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/payments/PYdOz9bgVReV/actions/cancel")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  '/v1/payments/{id}/actions/retry':
    post:
      operationId: PaymentsRetryPayment
      summary: Retry a payment
      description: Retry a payment.
      parameters:
        - name: id
          in: path
          description: Payment ID.
          required: true
          schema:
            type: string
          example: PYdOz9bgVReV
      responses:
        '201':
          description: Created
          content:
            application/json:
              example:
                message: Retried successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Payments
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/payments/PYdOz9bgVReV/actions/retry \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http POST https://api.tucuota.com/v1/payments/PYdOz9bgVReV/actions/retry \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/payments/PYdOz9bgVReV/actions/retry',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/payments/PYdOz9bgVReV/actions/retry",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/payments/PYdOz9bgVReV/actions/retry');
            $request->setRequestMethod('POST');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("POST", "/v1/payments/PYdOz9bgVReV/actions/retry", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/payments/PYdOz9bgVReV/actions/retry")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  /v1/sessions:
    post:
      operationId: PostSession
      summary: Create a sesssion
      description: Create a session
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                kind:
                  description: 'One of payment, subscription or mandate.'
                  type: string
                  enum:
                    - payment
                    - subscription
                    - mandate
                success_url:
                  description: The uri on which your customer will be redirected after completing the checkout.
                  type: string
                amount:
                  description: The amount of the payment or subscription.
                  type: string
                description:
                  description: The title of the payment or subscription.
                  type: string
                customer_id:
                  description: |
                    TuCuota customer_id if exists en TuCuota. Example: CSgaZlLaPMZO.
                  type: string
                customer_name:
                  description: |
                    Name of your customer. You can fill it or ask the customer to fill this field in the checkout process.
                  type: string
                customer_email:
                  description: |
                    Email of your customer. You can fill it or ask the customer to fill this field in the checkout process.
                  type: string
                editable_amount:
                  description: |
                    Allow the customer to set the amount, useful for donations.
                  type: boolean
                installments:
                  description: |
                    Only for payments, quantity of payments on which the amount will be splitted.
                  type: integer
                max_installments:
                  description: |
                    Only for payments, allow the customer to choose how many installments can split the payment.
                  type: integer
                interval_unit:
                  description: |
                    Only for subscriptions, the unit of time between customer charge dates. One of weekly, monthly or yearly.
                  type: string
                  enum:
                    - weekly
                    - monthly
                    - yearly
                interval:
                  description: |
                    Only for subscriptions, the number of interval_units between customer charge dates. Must be greater than to 1. If interval_unit is weekly and interval is 2, then the customer will be charged every two weeks. Defaults to 1.
                  type: integer
                day_of_month:
                  description: |
                    Only for subscriptions, the day of month, from 1 to 28. Use only if you need the subscription to start in a specyfic date. In most cases this should be null, therefore TuCuota will use the date of the moment when the user completes the checkout.
                  type: integer
                day_of_week:
                  description: |
                    Only for subscriptions, the day of week number, from 0 (Sunday) to 6 (Saturday). Use only if you need the subscription to start in a specyfic date. In most cases this should be null, therefore TuCuota will use the date of the moment when the user completes the checkout.
                  type: integer
                metadata:
                  description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                  example:
                    some: metadata
                  anyOf:
                    - additionalProperties:
                        type: string
                      type: object
                    - enum:
                        - ''
                      type: string
                    - type: 'null'
                count:
                  description: |
                    Only for subscriptions, the total number of payments that should
                    be taken by this subscription. If not specified the subscription
                    will continue until you cancel it.
                  type: integer
                editable_count:
                  description: |
                    Only for subscriptions, allow the customer to set the duration
                    of the subscriptions, useful for donations.
                  type: number
              example:
                kind: payment
                success_url: 'http://example.com/success'
                amount: 200.50
                description: Summer school
        required: false
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a session of your organization.
                    type: object
                    properties:
                      amount:
                        description: Amount to be collected
                        type: number
                        example: 12.5
                      brands:
                        type: array
                      completed_at:
                        description: 'Time at which the sessions was completed. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      count:
                        type: number
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      id:
                        description: UUID identifier for the object.
                        type: string
                        example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
                      name:
                        description: The customer's full name or business name.
                        type: string
                        example: Jorgelina Castro
                      email:
                        description: The customer's email address.
                        type: string
                        example: asd@asd.com
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      mobile_number:
                        example: '5491164531234'
                        oneOf:
                          - type: 'null'
                          - type: string
                      gateway_identifier:
                        type: integer
                        format: int32
                        example: 383473
                      identification_number:
                        example: 15.555.324
                        oneOf:
                          - type: 'null'
                          - type: string
                      identification_type:
                        example: DNI
                        oneOf:
                          - type: 'null'
                          - type: string
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      active_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      active_subscriptions_sum:
                        type: integer
                        format: int32
                        example: 0
                      approved_payments_count:
                        type: integer
                        format: int32
                        example: 0
                      approved_payments_sum:
                        type: integer
                        format: int32
                        example: 0
                      cancelled_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      paused_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      rejected_payments_count:
                        type: integer
                        format: int32
                        example: 0
                      rejected_payments_sum:
                        type: integer
                        format: int32
                        example: 0
                      finished_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      deleted_at:
                        description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                        oneOf:
                          - type: 'null'
                          - type: string
                    title: Session
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                errors:
                  email:
                    - El email es inválido.
                message: The given data was invalid.
      tags:
        - Sessions
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/sessions \
              --header 'Authorization: Bearer sk_live_...' \
              --header 'content-type: application/json' \
              --data '{"kind":"payment","success_url":"http://example.com/success","amount":"200.50","description":"Summer school"}'
        - lang: Shell + Httpie
          source: |-
            echo '{"kind":"payment","success_url":"http://example.com/success","amount":"200.50","description":"Summer school"}' |  \
              http POST https://api.tucuota.com/v1/sessions \
              Authorization:'Bearer sk_live_...' \
              content-type:application/json
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/sessions',
              headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer sk_live_...'
              },
              body: {
                kind: 'payment',
                success_url: 'http://example.com/success',
                amount: 200.50,
                description: 'Summer school'
              },
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/sessions",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"kind\":\"payment\",\"success_url\":\"http://example.com/success\",\"amount\":\"200.50\",\"description\":\"Summer school\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_...",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"kind":"payment","success_url":"http://example.com/success","amount":"200.50","description":"Summer school"}');

            $request->setRequestUrl('https://api.tucuota.com/v1/sessions');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $request->setHeaders([
              'content-type' => 'application/json',
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            payload = "{\"kind\":\"payment\",\"success_url\":\"http://example.com/success\",\"amount\":\"200.50\",\"description\":\"Summer school\"}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Bearer sk_live_..."
                }

            conn.request("POST", "/v1/sessions", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/sessions")
              .header("content-type", "application/json")
              .header("Authorization", "Bearer sk_live_...")
              .body("{\"kind\":\"payment\",\"success_url\":\"http://example.com/success\",\"amount\":\"200.50\",\"description\":\"Summer school\"}")
              .asString();
      x-codegen-request-body-name: body
  '/v1/sessions/{id}':
    get:
      operationId: SessionsGetSession
      summary: Retrieve a session
      description: Retrieve a session
      parameters:
        - name: id
          in: path
          description: Session UUID.
          required: true
          schema:
            type: string
          example: 58fa2240-d996-11e9-a698-09ff9b98c35f
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a session of your organization.
                    type: object
                    properties:
                      amount:
                        description: Amount to be collected
                        type: number
                        example: 12.5
                      brands:
                        type: array
                      completed_at:
                        description: 'Time at which the sessions was completed. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      count:
                        type: number
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      id:
                        description: UUID identifier for the object.
                        type: string
                        example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
                      name:
                        description: The customer's full name or business name.
                        type: string
                        example: Jorgelina Castro
                      email:
                        description: The customer's email address.
                        type: string
                        example: asd@asd.com
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      mobile_number:
                        example: '5491164531234'
                        oneOf:
                          - type: 'null'
                          - type: string
                      gateway_identifier:
                        type: integer
                        format: int32
                        example: 383473
                      identification_number:
                        example: 15.555.324
                        oneOf:
                          - type: 'null'
                          - type: string
                      identification_type:
                        example: DNI
                        oneOf:
                          - type: 'null'
                          - type: string
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      active_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      active_subscriptions_sum:
                        type: integer
                        format: int32
                        example: 0
                      approved_payments_count:
                        type: integer
                        format: int32
                        example: 0
                      approved_payments_sum:
                        type: integer
                        format: int32
                        example: 0
                      cancelled_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      paused_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      rejected_payments_count:
                        type: integer
                        format: int32
                        example: 0
                      rejected_payments_sum:
                        type: integer
                        format: int32
                        example: 0
                      finished_subscriptions_count:
                        type: integer
                        format: int32
                        example: 0
                      deleted_at:
                        description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                        oneOf:
                          - type: 'null'
                          - type: string
                    title: Session
        '404':
          description: Session not found
          content:
            application/json:
              example:
                message: Session not found
      tags:
        - Sessions
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://api.tucuota.com/v1/sessions/58fa2240-d996-11e9-a698-09ff9b98c35f \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET https://api.tucuota.com/v1/sessions/58fa2240-d996-11e9-a698-09ff9b98c35f \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/sessions/58fa2240-d996-11e9-a698-09ff9b98c35f',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/sessions/58fa2240-d996-11e9-a698-09ff9b98c35f",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/sessions/58fa2240-d996-11e9-a698-09ff9b98c35f');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/sessions/58fa2240-d996-11e9-a698-09ff9b98c35f", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/sessions/58fa2240-d996-11e9-a698-09ff9b98c35f")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  /v1/subscriptions:
    get:
      operationId: GetSubscriptions
      summary: List all subscriptions
      description: By default newest subscriptions will be first on the list.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      title: Subscription
                      description: This object represents a subscription of your organization.
                      type: object
                      properties:
                        created_at:
                          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          type: string
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                        currency:
                          type: string
                        approved_payments_count:
                          type: number
                        approved_payments_sum:
                          type: number
                        customer:
                          description: This object represents a customer of your organization.
                          type: object
                          properties:
                            id:
                              description: Unique identifier for the object.
                              type: string
                              example: CSljikas98
                              maxLength: 5000
                            name:
                              description: The customer's full name or business name.
                              type: string
                              example: Jorgelina Castro
                            email:
                              description: The customer's email address.
                              type: string
                              example: asd@asd.com
                            livemode:
                              description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                              type: boolean
                            metadata:
                              description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                              example:
                                some: metadata
                              anyOf:
                                - additionalProperties:
                                    type: string
                                  type: object
                                - enum:
                                    - ''
                                  type: string
                                - type: 'null'
                            mobile_number:
                              example: '5491164531234'
                              oneOf:
                                - type: 'null'
                                - type: string
                            gateway_identifier:
                              type: integer
                              format: int32
                              example: 383473
                            identification_number:
                              example: 15.555.324
                              oneOf:
                                - type: 'null'
                                - type: string
                            identification_type:
                              example: DNI
                              oneOf:
                                - type: 'null'
                                - type: string
                            created_at:
                              description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                              type: string
                              format: date-time
                              example: '2022-02-11T23:19:22-03:00'
                            updated_at:
                              description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                              type: string
                              format: date-time
                              example: '2022-02-11T23:19:22-03:00'
                            active_subscriptions_count:
                              type: integer
                              format: int32
                              example: 0
                            active_subscriptions_sum:
                              type: integer
                              format: int32
                              example: 0
                            approved_payments_count:
                              type: integer
                              format: int32
                              example: 0
                            approved_payments_sum:
                              type: integer
                              format: int32
                              example: 0
                            cancelled_subscriptions_count:
                              type: integer
                              format: int32
                              example: 0
                            paused_subscriptions_count:
                              type: integer
                              format: int32
                              example: 0
                            rejected_payments_count:
                              type: integer
                              format: int32
                              example: 0
                            rejected_payments_sum:
                              type: integer
                              format: int32
                              example: 0
                            finished_subscriptions_count:
                              type: integer
                              format: int32
                              example: 0
                            deleted_at:
                              description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                              format: date-time
                              example: '2022-02-11T23:19:22-03:00'
                              oneOf:
                                - type: 'null'
                                - type: string
                          title: Customer
                        first_date:
                          type: string
                        id:
                          type: string
                        livemode:
                          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                          type: boolean
                        metadata:
                          description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                          example:
                            some: metadata
                          anyOf:
                            - additionalProperties:
                                type: string
                              type: object
                            - enum:
                                - ''
                              type: string
                            - type: 'null'
                        object:
                          type: string
                        payment_method:
                          type: object
                          properties:
                            type:
                              description: 'One of: cbu, card.'
                              type: string
                            card:
                              type: object
                              properties:
                                bank:
                                  type: string
                                brand:
                                  type: string
                                  example: visa-credito
                                country:
                                  type: string
                                  example: AR
                                expiration_month:
                                  type: number
                                expiration_year:
                                  type: number
                                fingerprint:
                                  type: string
                                last_four_digits:
                                  type: string
                            cbu:
                              type: object
                              properties:
                                bank:
                                  type: string
                                country:
                                  type: string
                                fingerprint:
                                  type: string
                                last_four_digits:
                                  type: string
                            created_at:
                              type: string
                            id:
                              type: string
                            livemode:
                              type: boolean
                            object:
                              type: string
                            updated_at:
                              type: string
                        rejected_payments_count:
                          type: number
                        rejected_payments_sum:
                          type: number
                        start_date:
                          type: string
                        status:
                          type: string
                        upcoming_dates:
                          type: array
                          items:
                            type: object
                        updated_at:
                          description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          type: string
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                  links:
                    description: Pagination metadata
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      last:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      next:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      prev:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                    title: Response Meta
                  meta:
                    description: Pagination metadata
                    type: object
                    properties:
                      current_page:
                        type: number
                        example: 1
                      from:
                        type: number
                        example: 1
                      last_page:
                        type: number
                        example: 28
                      per_page:
                        type: number
                        example: 1
                      to:
                        type: number
                        example: 1
                      total:
                        type: number
                        example: 2
                      path:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                    title: Response Meta
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Subscriptions
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://api.tucuota.com/v1/subscriptions \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET https://api.tucuota.com/v1/subscriptions \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/subscriptions',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/subscriptions",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/subscriptions');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/subscriptions", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/subscriptions")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
    post:
      operationId: SubscriptionsPostSubscription
      summary: Create a subscription
      description: Create a subscription
      requestBody:
        content:
          application/json:
            encoding:
              metadata:
                explode: true
                style: deepObject
            schema:
              type: object
              properties:
                amount:
                  description: |
                    The amount of each payment of the subscription.
                  type: number
                description:
                  description: |
                    The title of each payment of the subscription.
                  type: string
                  maxLength: 255
                count:
                  description: |
                    The total number of payments that should be taken by this subscription. If not specified the
                    subscription will continue until you cancel it.
                  type: number
                customer_id:
                  description: Customer reference
                  type: string
                payment_method_id:
                  description: |
                    The token of the card or cbu for each payment of the subscription. This field is required if
                    payment_method_number is not given.
                  type: string
                start_date:
                  description: 'A future date on which the first payment of the subscription should be collected. If not specified, the first payment will be collected as soon as possible.'
                  type: string
                interval_unit:
                  description: 'The unit of time between customer charge dates. One of weekly, monthly or yearly. Example monthly'
                  type: string
                interval:
                  description: 'Number of interval_units between customer charge dates. Must be greater than to 1. If interval_unit is weekly and interval is 2, then the customer will be charged every two weeks. Defaults to 1. Example 1'
                  type: number
                day_of_month:
                  description: 'Day of month, from 1 to 28. This field is required if interval_unit is set to monthly. Defaults to 1.'
                  type: number
                day_of_week:
                  description: 'Day of week number, from 0 (Sunday) to 6 (Saturday). This field is required if interval_unit is set to weekly.'
                  type: number
                metadata:
                  description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                  example:
                    some: metadata
                  anyOf:
                    - additionalProperties:
                        type: string
                      type: object
                    - enum:
                        - ''
                      type: string
                    - type: 'null'
              example:
                amount: 100
                description: Some subscription description
                customer_id: CS9PL8eeo8aB
                payment_method_number: 4024007127322104
                interval_unit: monthly
                day_of_month: 1
                metadata:
                  some: metadata
              required:
                - amount
                - customer_id
                - description
                - interval
                - interval_unit
        required: false
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a subscription of your organization.
                    type: object
                    properties:
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      currency:
                        type: string
                      approved_payments_count:
                        type: number
                      approved_payments_sum:
                        type: number
                      customer:
                        description: This object represents a customer of your organization.
                        type: object
                        properties:
                          id:
                            description: Unique identifier for the object.
                            type: string
                            example: CSljikas98
                            maxLength: 5000
                          name:
                            description: The customer's full name or business name.
                            type: string
                            example: Jorgelina Castro
                          email:
                            description: The customer's email address.
                            type: string
                            example: asd@asd.com
                          livemode:
                            description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                            type: boolean
                          metadata:
                            description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                            example:
                              some: metadata
                            anyOf:
                              - additionalProperties:
                                  type: string
                                type: object
                              - enum:
                                  - ''
                                type: string
                              - type: 'null'
                          mobile_number:
                            example: '5491164531234'
                            oneOf:
                              - type: 'null'
                              - type: string
                          gateway_identifier:
                            type: integer
                            format: int32
                            example: 383473
                          identification_number:
                            example: 15.555.324
                            oneOf:
                              - type: 'null'
                              - type: string
                          identification_type:
                            example: DNI
                            oneOf:
                              - type: 'null'
                              - type: string
                          created_at:
                            description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          updated_at:
                            description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          active_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          active_subscriptions_sum:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          cancelled_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          paused_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          finished_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          deleted_at:
                            description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                            oneOf:
                              - type: 'null'
                              - type: string
                        title: Customer
                      first_date:
                        type: string
                      id:
                        type: string
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      object:
                        type: string
                      payment_method:
                        type: object
                        properties:
                          type:
                            description: 'One of: cbu, card.'
                            type: string
                          card:
                            type: object
                            properties:
                              bank:
                                type: string
                              brand:
                                type: string
                                example: visa-credito
                              country:
                                type: string
                                example: AR
                              expiration_month:
                                type: number
                              expiration_year:
                                type: number
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          cbu:
                            type: object
                            properties:
                              bank:
                                type: string
                              country:
                                type: string
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          created_at:
                            type: string
                          id:
                            type: string
                          livemode:
                            type: boolean
                          object:
                            type: string
                          updated_at:
                            type: string
                      rejected_payments_count:
                        type: number
                      rejected_payments_sum:
                        type: number
                      start_date:
                        type: string
                      status:
                        type: string
                      upcoming_dates:
                        type: array
                        items:
                          type: object
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                    title: Subscription
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                errors:
                  email:
                    - El email es inválido.
                message: The given data was invalid.
      tags:
        - Subscriptions
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/subscriptions \
              --header 'Authorization: Bearer sk_live_...' \
              --header 'content-type: application/json' \
              --data '{"amount":100,"description":"Some subscription description","customer_id":"CS9PL8eeo8aB","payment_method_number":"4024007127322104","interval_unit":"monthly","day_of_month":1,"metadata":{"some":"metadata"}}'
        - lang: Shell + Httpie
          source: |-
            echo '{"amount":100,"description":"Some subscription description","customer_id":"CS9PL8eeo8aB","payment_method_number":"4024007127322104","interval_unit":"monthly","day_of_month":1,"metadata":{"some":"metadata"}}' |  \
              http POST https://api.tucuota.com/v1/subscriptions \
              Authorization:'Bearer sk_live_...' \
              content-type:application/json
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/subscriptions',
              headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer sk_live_...'
              },
              body: {
                amount: 100,
                description: 'Some subscription description',
                customer_id: 'CS9PL8eeo8aB',
                payment_method_number: 4024007127322104,
                interval_unit: 'monthly',
                day_of_month: 1,
                metadata: {some: 'metadata'}
              },
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/subscriptions",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"amount\":100,\"description\":\"Some subscription description\",\"customer_id\":\"CS9PL8eeo8aB\",\"payment_method_number\":\"4024007127322104\",\"interval_unit\":\"monthly\",\"day_of_month\":1,\"metadata\":{\"some\":\"metadata\"}}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_...",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"amount":100,"description":"Some subscription description","customer_id":"CS9PL8eeo8aB","payment_method_number":"4024007127322104","interval_unit":"monthly","day_of_month":1,"metadata":{"some":"metadata"}}');

            $request->setRequestUrl('https://api.tucuota.com/v1/subscriptions');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $request->setHeaders([
              'content-type' => 'application/json',
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            payload = "{\"amount\":100,\"description\":\"Some subscription description\",\"customer_id\":\"CS9PL8eeo8aB\",\"payment_method_number\":\"4024007127322104\",\"interval_unit\":\"monthly\",\"day_of_month\":1,\"metadata\":{\"some\":\"metadata\"}}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Bearer sk_live_..."
                }

            conn.request("POST", "/v1/subscriptions", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/subscriptions")
              .header("content-type", "application/json")
              .header("Authorization", "Bearer sk_live_...")
              .body("{\"amount\":100,\"description\":\"Some subscription description\",\"customer_id\":\"CS9PL8eeo8aB\",\"payment_method_number\":\"4024007127322104\",\"interval_unit\":\"monthly\",\"day_of_month\":1,\"metadata\":{\"some\":\"metadata\"}}")
              .asString();
  '/v1/subscriptions/{id}':
    get:
      operationId: SubscriptionsGetSubscription
      summary: Retrieve a subscription
      description: Retrieve a subscription.
      parameters:
        - name: id
          in: path
          description: Subscription ID.
          required: true
          schema:
            type: string
          example: SBmX1MrZ77Mwq3
      responses:
        '200':
          description: Retrieve a subscription
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a subscription of your organization.
                    type: object
                    properties:
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      currency:
                        type: string
                      approved_payments_count:
                        type: number
                      approved_payments_sum:
                        type: number
                      customer:
                        description: This object represents a customer of your organization.
                        type: object
                        properties:
                          id:
                            description: Unique identifier for the object.
                            type: string
                            example: CSljikas98
                            maxLength: 5000
                          name:
                            description: The customer's full name or business name.
                            type: string
                            example: Jorgelina Castro
                          email:
                            description: The customer's email address.
                            type: string
                            example: asd@asd.com
                          livemode:
                            description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                            type: boolean
                          metadata:
                            description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                            example:
                              some: metadata
                            anyOf:
                              - additionalProperties:
                                  type: string
                                type: object
                              - enum:
                                  - ''
                                type: string
                              - type: 'null'
                          mobile_number:
                            example: '5491164531234'
                            oneOf:
                              - type: 'null'
                              - type: string
                          gateway_identifier:
                            type: integer
                            format: int32
                            example: 383473
                          identification_number:
                            example: 15.555.324
                            oneOf:
                              - type: 'null'
                              - type: string
                          identification_type:
                            example: DNI
                            oneOf:
                              - type: 'null'
                              - type: string
                          created_at:
                            description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          updated_at:
                            description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          active_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          active_subscriptions_sum:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          cancelled_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          paused_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          finished_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          deleted_at:
                            description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                            oneOf:
                              - type: 'null'
                              - type: string
                        title: Customer
                      first_date:
                        type: string
                      id:
                        type: string
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      object:
                        type: string
                      payment_method:
                        type: object
                        properties:
                          type:
                            description: 'One of: cbu, card.'
                            type: string
                          card:
                            type: object
                            properties:
                              bank:
                                type: string
                              brand:
                                type: string
                                example: visa-credito
                              country:
                                type: string
                                example: AR
                              expiration_month:
                                type: number
                              expiration_year:
                                type: number
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          cbu:
                            type: object
                            properties:
                              bank:
                                type: string
                              country:
                                type: string
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          created_at:
                            type: string
                          id:
                            type: string
                          livemode:
                            type: boolean
                          object:
                            type: string
                          updated_at:
                            type: string
                      rejected_payments_count:
                        type: number
                      rejected_payments_sum:
                        type: number
                      start_date:
                        type: string
                      status:
                        type: string
                      upcoming_dates:
                        type: array
                        items:
                          type: object
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                    title: Subscription
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Not Found response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Record not found
                    title: Not Found
      tags:
        - Subscriptions
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3 \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3 \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/subscriptions/SBmX1MrZ77Mwq3", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
    put:
      operationId: SubscriptionsUpdateSubscription
      summary: Update a subscription
      description: Update a subscription.
      parameters:
        - name: id
          in: path
          description: Subscription ID.
          required: true
          schema:
            type: string
          example: SBmX1MrZ77Mwq3
      requestBody:
        content:
          application/json:
            encoding:
              metadata:
                explode: true
                style: deepObject
            schema:
              type: object
              properties:
                amount:
                  description: |
                    The amount of each payment of the subscription.
                  type: number
                description:
                  description: |
                    The title of each payment of the subscription.
                  type: string
                  maxLength: 255
                count:
                  description: |
                    The total number of payments that should be taken by this subscription. If not specified the
                    subscription will continue until you cancel it.
                  type: number
                customer_id:
                  description: Customer reference
                  type: string
                payment_method_id:
                  description: |
                    The token of the card or cbu for each payment of the subscription. This field is required if
                    payment_method_number is not given.
                  type: string
                start_date:
                  description: 'A future date on which the first payment of the subscription should be collected. If not specified, the first payment will be collected as soon as possible.'
                  type: string
                interval_unit:
                  description: 'The unit of time between customer charge dates. One of weekly, monthly or yearly. Example monthly'
                  type: string
                interval:
                  description: 'Number of interval_units between customer charge dates. Must be greater than to 1. If interval_unit is weekly and interval is 2, then the customer will be charged every two weeks. Defaults to 1. Example 1'
                  type: number
                day_of_month:
                  description: 'Day of month, from 1 to 28. This field is required if interval_unit is set to monthly. Defaults to 1.'
                  type: number
                day_of_week:
                  description: 'Day of week number, from 0 (Sunday) to 6 (Saturday). This field is required if interval_unit is set to weekly.'
                  type: number
                metadata:
                  description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                  example:
                    some: metadata
                  anyOf:
                    - additionalProperties:
                        type: string
                      type: object
                    - enum:
                        - ''
                      type: string
                    - type: 'null'
              example:
                amount: 100
                description: Some subscription description
                customer_id: CS9PL8eeo8aB
                payment_method_number: 4024007127322104
                interval_unit: monthly
                day_of_month: 1
                metadata:
                  some: metadata
              required:
                - amount
                - customer_id
                - description
                - interval
                - interval_unit
        required: false
      responses:
        '200':
          description: Subscription updated successfuly.
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a subscription of your organization.
                    type: object
                    properties:
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      currency:
                        type: string
                      approved_payments_count:
                        type: number
                      approved_payments_sum:
                        type: number
                      customer:
                        description: This object represents a customer of your organization.
                        type: object
                        properties:
                          id:
                            description: Unique identifier for the object.
                            type: string
                            example: CSljikas98
                            maxLength: 5000
                          name:
                            description: The customer's full name or business name.
                            type: string
                            example: Jorgelina Castro
                          email:
                            description: The customer's email address.
                            type: string
                            example: asd@asd.com
                          livemode:
                            description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                            type: boolean
                          metadata:
                            description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                            example:
                              some: metadata
                            anyOf:
                              - additionalProperties:
                                  type: string
                                type: object
                              - enum:
                                  - ''
                                type: string
                              - type: 'null'
                          mobile_number:
                            example: '5491164531234'
                            oneOf:
                              - type: 'null'
                              - type: string
                          gateway_identifier:
                            type: integer
                            format: int32
                            example: 383473
                          identification_number:
                            example: 15.555.324
                            oneOf:
                              - type: 'null'
                              - type: string
                          identification_type:
                            example: DNI
                            oneOf:
                              - type: 'null'
                              - type: string
                          created_at:
                            description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          updated_at:
                            description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          active_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          active_subscriptions_sum:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          cancelled_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          paused_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          finished_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          deleted_at:
                            description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                            oneOf:
                              - type: 'null'
                              - type: string
                        title: Customer
                      first_date:
                        type: string
                      id:
                        type: string
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      object:
                        type: string
                      payment_method:
                        type: object
                        properties:
                          type:
                            description: 'One of: cbu, card.'
                            type: string
                          card:
                            type: object
                            properties:
                              bank:
                                type: string
                              brand:
                                type: string
                                example: visa-credito
                              country:
                                type: string
                                example: AR
                              expiration_month:
                                type: number
                              expiration_year:
                                type: number
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          cbu:
                            type: object
                            properties:
                              bank:
                                type: string
                              country:
                                type: string
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          created_at:
                            type: string
                          id:
                            type: string
                          livemode:
                            type: boolean
                          object:
                            type: string
                          updated_at:
                            type: string
                      rejected_payments_count:
                        type: number
                      rejected_payments_sum:
                        type: number
                      start_date:
                        type: string
                      status:
                        type: string
                      upcoming_dates:
                        type: array
                        items:
                          type: object
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                    title: Subscription
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                errors:
                  email:
                    - El email es inválido.
                message: The given data was invalid.
      tags:
        - Subscriptions
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request PUT \
              --url https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3 \
              --header 'Authorization: Bearer sk_live_...' \
              --header 'content-type: application/json' \
              --data '{"amount":100,"description":"Some subscription description","customer_id":"CS9PL8eeo8aB","payment_method_number":"4024007127322104","interval_unit":"monthly","day_of_month":1,"metadata":{"some":"metadata"}}'
        - lang: Shell + Httpie
          source: |-
            echo '{"amount":100,"description":"Some subscription description","customer_id":"CS9PL8eeo8aB","payment_method_number":"4024007127322104","interval_unit":"monthly","day_of_month":1,"metadata":{"some":"metadata"}}' |  \
              http PUT https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3 \
              Authorization:'Bearer sk_live_...' \
              content-type:application/json
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'PUT',
              url: 'https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3',
              headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer sk_live_...'
              },
              body: {
                amount: 100,
                description: 'Some subscription description',
                customer_id: 'CS9PL8eeo8aB',
                payment_method_number: 4024007127322104,
                interval_unit: 'monthly',
                day_of_month: 1,
                metadata: {some: 'metadata'}
              },
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"amount\":100,\"description\":\"Some subscription description\",\"customer_id\":\"CS9PL8eeo8aB\",\"payment_method_number\":\"4024007127322104\",\"interval_unit\":\"monthly\",\"day_of_month\":1,\"metadata\":{\"some\":\"metadata\"}}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_...",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"amount":100,"description":"Some subscription description","customer_id":"CS9PL8eeo8aB","payment_method_number":"4024007127322104","interval_unit":"monthly","day_of_month":1,"metadata":{"some":"metadata"}}');

            $request->setRequestUrl('https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3');
            $request->setRequestMethod('PUT');
            $request->setBody($body);

            $request->setHeaders([
              'content-type' => 'application/json',
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            payload = "{\"amount\":100,\"description\":\"Some subscription description\",\"customer_id\":\"CS9PL8eeo8aB\",\"payment_method_number\":\"4024007127322104\",\"interval_unit\":\"monthly\",\"day_of_month\":1,\"metadata\":{\"some\":\"metadata\"}}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Bearer sk_live_..."
                }

            conn.request("PUT", "/v1/subscriptions/SBmX1MrZ77Mwq3", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.put("https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3")
              .header("content-type", "application/json")
              .header("Authorization", "Bearer sk_live_...")
              .body("{\"amount\":100,\"description\":\"Some subscription description\",\"customer_id\":\"CS9PL8eeo8aB\",\"payment_method_number\":\"4024007127322104\",\"interval_unit\":\"monthly\",\"day_of_month\":1,\"metadata\":{\"some\":\"metadata\"}}")
              .asString();
  '/v1/subscriptions/{id}/actions/pause':
    post:
      operationId: SubscriptionsPauseSubscription
      summary: Pause a subscription
      description: Pause a subscription.
      parameters:
        - name: id
          in: path
          description: Subscription ID.
          required: true
          schema:
            type: string
          example: SBmX1MrZ77Mwq3
      responses:
        '201':
          description: Subscription paused succesfully
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a subscription of your organization.
                    type: object
                    properties:
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      currency:
                        type: string
                      approved_payments_count:
                        type: number
                      approved_payments_sum:
                        type: number
                      customer:
                        description: This object represents a customer of your organization.
                        type: object
                        properties:
                          id:
                            description: Unique identifier for the object.
                            type: string
                            example: CSljikas98
                            maxLength: 5000
                          name:
                            description: The customer's full name or business name.
                            type: string
                            example: Jorgelina Castro
                          email:
                            description: The customer's email address.
                            type: string
                            example: asd@asd.com
                          livemode:
                            description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                            type: boolean
                          metadata:
                            description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                            example:
                              some: metadata
                            anyOf:
                              - additionalProperties:
                                  type: string
                                type: object
                              - enum:
                                  - ''
                                type: string
                              - type: 'null'
                          mobile_number:
                            example: '5491164531234'
                            oneOf:
                              - type: 'null'
                              - type: string
                          gateway_identifier:
                            type: integer
                            format: int32
                            example: 383473
                          identification_number:
                            example: 15.555.324
                            oneOf:
                              - type: 'null'
                              - type: string
                          identification_type:
                            example: DNI
                            oneOf:
                              - type: 'null'
                              - type: string
                          created_at:
                            description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          updated_at:
                            description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          active_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          active_subscriptions_sum:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          cancelled_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          paused_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          finished_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          deleted_at:
                            description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                            oneOf:
                              - type: 'null'
                              - type: string
                        title: Customer
                      first_date:
                        type: string
                      id:
                        type: string
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      object:
                        type: string
                      payment_method:
                        type: object
                        properties:
                          type:
                            description: 'One of: cbu, card.'
                            type: string
                          card:
                            type: object
                            properties:
                              bank:
                                type: string
                              brand:
                                type: string
                                example: visa-credito
                              country:
                                type: string
                                example: AR
                              expiration_month:
                                type: number
                              expiration_year:
                                type: number
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          cbu:
                            type: object
                            properties:
                              bank:
                                type: string
                              country:
                                type: string
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          created_at:
                            type: string
                          id:
                            type: string
                          livemode:
                            type: boolean
                          object:
                            type: string
                          updated_at:
                            type: string
                      rejected_payments_count:
                        type: number
                      rejected_payments_sum:
                        type: number
                      start_date:
                        type: string
                      status:
                        type: string
                      upcoming_dates:
                        type: array
                        items:
                          type: object
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                    title: Subscription
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                message: Subscription cannot be paused.
      tags:
        - Subscriptions
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/pause \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http POST https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/pause \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/pause',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/pause",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/pause');
            $request->setRequestMethod('POST');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("POST", "/v1/subscriptions/SBmX1MrZ77Mwq3/actions/pause", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/pause")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  '/v1/subscriptions/{id}/actions/resume':
    post:
      operationId: SubscriptionsResumeSubscription
      summary: Resume a subscription
      description: Resume a subscription.
      parameters:
        - name: id
          in: path
          description: Subscription ID.
          required: true
          schema:
            type: string
          example: SBmX1MrZ77Mwq3
      responses:
        '201':
          description: Resumed succesfully
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a subscription of your organization.
                    type: object
                    properties:
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      currency:
                        type: string
                      approved_payments_count:
                        type: number
                      approved_payments_sum:
                        type: number
                      customer:
                        description: This object represents a customer of your organization.
                        type: object
                        properties:
                          id:
                            description: Unique identifier for the object.
                            type: string
                            example: CSljikas98
                            maxLength: 5000
                          name:
                            description: The customer's full name or business name.
                            type: string
                            example: Jorgelina Castro
                          email:
                            description: The customer's email address.
                            type: string
                            example: asd@asd.com
                          livemode:
                            description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                            type: boolean
                          metadata:
                            description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                            example:
                              some: metadata
                            anyOf:
                              - additionalProperties:
                                  type: string
                                type: object
                              - enum:
                                  - ''
                                type: string
                              - type: 'null'
                          mobile_number:
                            example: '5491164531234'
                            oneOf:
                              - type: 'null'
                              - type: string
                          gateway_identifier:
                            type: integer
                            format: int32
                            example: 383473
                          identification_number:
                            example: 15.555.324
                            oneOf:
                              - type: 'null'
                              - type: string
                          identification_type:
                            example: DNI
                            oneOf:
                              - type: 'null'
                              - type: string
                          created_at:
                            description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          updated_at:
                            description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          active_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          active_subscriptions_sum:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          cancelled_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          paused_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          finished_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          deleted_at:
                            description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                            oneOf:
                              - type: 'null'
                              - type: string
                        title: Customer
                      first_date:
                        type: string
                      id:
                        type: string
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      object:
                        type: string
                      payment_method:
                        type: object
                        properties:
                          type:
                            description: 'One of: cbu, card.'
                            type: string
                          card:
                            type: object
                            properties:
                              bank:
                                type: string
                              brand:
                                type: string
                                example: visa-credito
                              country:
                                type: string
                                example: AR
                              expiration_month:
                                type: number
                              expiration_year:
                                type: number
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          cbu:
                            type: object
                            properties:
                              bank:
                                type: string
                              country:
                                type: string
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          created_at:
                            type: string
                          id:
                            type: string
                          livemode:
                            type: boolean
                          object:
                            type: string
                          updated_at:
                            type: string
                      rejected_payments_count:
                        type: number
                      rejected_payments_sum:
                        type: number
                      start_date:
                        type: string
                      status:
                        type: string
                      upcoming_dates:
                        type: array
                        items:
                          type: object
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                    title: Subscription
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                errors:
                  amount:
                    - Amount cannot be changed.
                message: The given data was invalid.
      tags:
        - Subscriptions
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/resume \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http POST https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/resume \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/resume',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/resume",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/resume');
            $request->setRequestMethod('POST');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("POST", "/v1/subscriptions/SBmX1MrZ77Mwq3/actions/resume", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/resume")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  '/v1/subscriptions/{id}/actions/cancel':
    post:
      operationId: SubscriptionsCancelSubscription
      summary: Cancel a subcription
      description: |
        This action cancels and archive the subscription. Also cancel the payments
        related to it.
      parameters:
        - name: id
          in: path
          description: Subscription ID.
          required: true
          schema:
            type: string
          example: SBmX1MrZ77Mwq3
      responses:
        '201':
          description: Subscription cancelled succesfully
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: This object represents a subscription of your organization.
                    type: object
                    properties:
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      currency:
                        type: string
                      approved_payments_count:
                        type: number
                      approved_payments_sum:
                        type: number
                      customer:
                        description: This object represents a customer of your organization.
                        type: object
                        properties:
                          id:
                            description: Unique identifier for the object.
                            type: string
                            example: CSljikas98
                            maxLength: 5000
                          name:
                            description: The customer's full name or business name.
                            type: string
                            example: Jorgelina Castro
                          email:
                            description: The customer's email address.
                            type: string
                            example: asd@asd.com
                          livemode:
                            description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                            type: boolean
                          metadata:
                            description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                            example:
                              some: metadata
                            anyOf:
                              - additionalProperties:
                                  type: string
                                type: object
                              - enum:
                                  - ''
                                type: string
                              - type: 'null'
                          mobile_number:
                            example: '5491164531234'
                            oneOf:
                              - type: 'null'
                              - type: string
                          gateway_identifier:
                            type: integer
                            format: int32
                            example: 383473
                          identification_number:
                            example: 15.555.324
                            oneOf:
                              - type: 'null'
                              - type: string
                          identification_type:
                            example: DNI
                            oneOf:
                              - type: 'null'
                              - type: string
                          created_at:
                            description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          updated_at:
                            description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            type: string
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                          active_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          active_subscriptions_sum:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          approved_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          cancelled_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          paused_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_count:
                            type: integer
                            format: int32
                            example: 0
                          rejected_payments_sum:
                            type: integer
                            format: int32
                            example: 0
                          finished_subscriptions_count:
                            type: integer
                            format: int32
                            example: 0
                          deleted_at:
                            description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                            format: date-time
                            example: '2022-02-11T23:19:22-03:00'
                            oneOf:
                              - type: 'null'
                              - type: string
                        title: Customer
                      first_date:
                        type: string
                      id:
                        type: string
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      metadata:
                        description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                        example:
                          some: metadata
                        anyOf:
                          - additionalProperties:
                              type: string
                            type: object
                          - enum:
                              - ''
                            type: string
                          - type: 'null'
                      object:
                        type: string
                      payment_method:
                        type: object
                        properties:
                          type:
                            description: 'One of: cbu, card.'
                            type: string
                          card:
                            type: object
                            properties:
                              bank:
                                type: string
                              brand:
                                type: string
                                example: visa-credito
                              country:
                                type: string
                                example: AR
                              expiration_month:
                                type: number
                              expiration_year:
                                type: number
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          cbu:
                            type: object
                            properties:
                              bank:
                                type: string
                              country:
                                type: string
                              fingerprint:
                                type: string
                              last_four_digits:
                                type: string
                          created_at:
                            type: string
                          id:
                            type: string
                          livemode:
                            type: boolean
                          object:
                            type: string
                          updated_at:
                            type: string
                      rejected_payments_count:
                        type: number
                      rejected_payments_sum:
                        type: number
                      start_date:
                        type: string
                      status:
                        type: string
                      upcoming_dates:
                        type: array
                        items:
                          type: object
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                    title: Subscription
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                message: Subscription cannot be cancelled.
      tags:
        - Subscriptions
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/cancel \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http POST https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/cancel \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/cancel',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/cancel",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/cancel');
            $request->setRequestMethod('POST');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("POST", "/v1/subscriptions/SBmX1MrZ77Mwq3/actions/cancel", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/subscriptions/SBmX1MrZ77Mwq3/actions/cancel")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
  /v1/webhooks:
    get:
      operationId: GetWebhooks
      summary: List all webhooks
      description: Returns a list of your webhooks.
      parameters:
        - name: page
          in: query
          description: Cursor value to paginate response.
          required: false
          schema:
            type: number
          example: '10'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      title: Webhook
                      description: |-
                        You can configure [webhook endpoints](https://tucuota.com/docs/webhooks/) via the API to be
                        notified about events that happen in your TuCuota account or connected
                        accounts.

                        Most users configure webhooks from [the dashboard](https://dashboard.tucuota.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
                      type: object
                      properties:
                        id:
                          description: Unique identifier for the object.
                          type: string
                          maxLength: 5000
                        object:
                          type: string
                          enum:
                            - webhook
                        url:
                          description: The URL of the webhook endpoint.
                          type: string
                          example: 'https://tucuota.com/webhook/200'
                          maxLength: 5000
                        enabled:
                          description: Whether the webhook is enabled.
                          type: boolean
                        enabled_events:
                          description: |
                            One of: `customer.created`, `customer.disabled`, `customer.restored`, `customer.updated`, `gateway.created`, `gateway.disabled`, `gateway.updated`, `payment.cancelled`, `payment.created`, `payment.retrying`, `payment.updated`, `payment_method.automatically_updated`, `payment_method.created`, `payment_method.updated`, `subscription.cancelled`, `subscription.created`, `subscription.finished`, `subscription.paused`, `subscription.resumed`, `subscription.updated`, `user.updated_available_brands`
                          type: array
                          items:
                            type: string
                          example:
                            - customer.created
                            - customer.updated
                            - payment.created
                        secret:
                          description: 'The endpoint''s secret, used to generate [webhook signatures](https://tucuota.com/docs/webhooks/signatures).'
                          type: string
                          example: Rrdm41mW4x54uUS2A6QnHhm7hXwpuR
                          maxLength: 5000
                        failed_lately_count:
                          type: integer
                          format: int32
                          example: 0
                        success_lately_count:
                          type: integer
                          format: int32
                          example: 0
                        livemode:
                          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                          type: boolean
                        created_at:
                          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          type: string
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                        updated_at:
                          description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                          type: string
                          format: date-time
                          example: '2022-02-11T23:19:22-03:00'
                      example:
                        created_at: '2022-02-11T23:19:22-03:00'
                        enabled: true
                        enabled_events:
                          - '*'
                        id: WHq4VzyAzDgB
                        livemode: false
                        object: webhook
                        secret: DmUeH9E9yJ7ax9IYQVm9HpQ3VWvIx0
                        updated_at: '2022-02-11T23:19:22-03:00'
                        url: 'https://site.com/webhook'
                  links:
                    description: Pagination metadata
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      last:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      next:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                      prev:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                        nullable: true
                    title: Response Meta
                  meta:
                    description: Pagination metadata
                    type: object
                    properties:
                      current_page:
                        type: number
                        example: 1
                      from:
                        type: number
                        example: 1
                      last_page:
                        type: number
                        example: 28
                      per_page:
                        type: number
                        example: 1
                      to:
                        type: number
                        example: 1
                      total:
                        type: number
                        example: 2
                      path:
                        type: string
                        example: 'https://api.tucuota.test/v1/customers'
                    title: Response Meta
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Webhooks
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://api.tucuota.com/v1/webhooks?page=SOME_NUMBER_VALUE' \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET 'https://api.tucuota.com/v1/webhooks?page=SOME_NUMBER_VALUE' \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/webhooks',
              qs: {page: 'SOME_NUMBER_VALUE'},
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/webhooks?page=SOME_NUMBER_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/webhooks');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString([
              'page' => 'SOME_NUMBER_VALUE'
            ]));

            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/webhooks?page=SOME_NUMBER_VALUE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/webhooks?page=SOME_NUMBER_VALUE")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
    post:
      operationId: CreateWebhook
      summary: Create a webhook
      requestBody:
        content:
          application/json:
            encoding:
              enabled_events:
                explode: true
                style: deepObject
              metadata:
                explode: true
                style: deepObject
            example:
              url: 'https://my_domain/my_webhook_endpoint'
            schema:
              type: object
              properties:
                enabled_events:
                  description: 'The list of events to enable for this endpoint. You may specify `[''*'']` to enable all events, except those that require explicit selection.'
                  type: array
                  items:
                    enum:
                      - '*'
                      - customer.created
                      - customer.deleted
                    type: string
                metadata:
                  description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
                  example:
                    some: metadata
                  anyOf:
                    - additionalProperties:
                        type: string
                      type: object
                    - enum:
                        - ''
                      type: string
                    - type: 'null'
                url:
                  description: The URL of the webhook endpoint.
                  type: string
              additionalProperties: false
              required:
                - url
        required: true
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: |-
                      You can configure [webhook endpoints](https://tucuota.com/docs/webhooks/) via the API to be
                      notified about events that happen in your TuCuota account or connected
                      accounts.

                      Most users configure webhooks from [the dashboard](https://dashboard.tucuota.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
                    type: object
                    example:
                      created_at: '2022-02-11T23:19:22-03:00'
                      enabled: true
                      enabled_events:
                        - '*'
                      id: WHq4VzyAzDgB
                      livemode: false
                      object: webhook
                      secret: DmUeH9E9yJ7ax9IYQVm9HpQ3VWvIx0
                      updated_at: '2022-02-11T23:19:22-03:00'
                      url: 'https://site.com/webhook'
                    properties:
                      id:
                        description: Unique identifier for the object.
                        type: string
                        maxLength: 5000
                      object:
                        type: string
                        enum:
                          - webhook
                      url:
                        description: The URL of the webhook endpoint.
                        type: string
                        example: 'https://tucuota.com/webhook/200'
                        maxLength: 5000
                      enabled:
                        description: Whether the webhook is enabled.
                        type: boolean
                      enabled_events:
                        description: |
                          One of: `customer.created`, `customer.disabled`, `customer.restored`, `customer.updated`, `gateway.created`, `gateway.disabled`, `gateway.updated`, `payment.cancelled`, `payment.created`, `payment.retrying`, `payment.updated`, `payment_method.automatically_updated`, `payment_method.created`, `payment_method.updated`, `subscription.cancelled`, `subscription.created`, `subscription.finished`, `subscription.paused`, `subscription.resumed`, `subscription.updated`, `user.updated_available_brands`
                        type: array
                        items:
                          type: string
                        example:
                          - customer.created
                          - customer.updated
                          - payment.created
                      secret:
                        description: 'The endpoint''s secret, used to generate [webhook signatures](https://tucuota.com/docs/webhooks/signatures).'
                        type: string
                        example: Rrdm41mW4x54uUS2A6QnHhm7hXwpuR
                        maxLength: 5000
                      failed_lately_count:
                        type: integer
                        format: int32
                        example: 0
                      success_lately_count:
                        type: integer
                        format: int32
                        example: 0
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                    title: Webhook
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                errors:
                  url:
                    - El formato del campo es inválido.
                message: The given data was invalid.
      tags:
        - Webhooks
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://api.tucuota.com/v1/webhooks \
              --header 'Authorization: Bearer sk_live_...' \
              --header 'content-type: application/json' \
              --data '{"enabled_events":["*"],"metadata":{"some":"metadata"},"url":"string"}'
        - lang: Shell + Httpie
          source: |-
            echo '{"enabled_events":["*"],"metadata":{"some":"metadata"},"url":"string"}' |  \
              http POST https://api.tucuota.com/v1/webhooks \
              Authorization:'Bearer sk_live_...' \
              content-type:application/json
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'POST',
              url: 'https://api.tucuota.com/v1/webhooks',
              headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer sk_live_...'
              },
              body: {enabled_events: ['*'], metadata: {some: 'metadata'}, url: 'string'},
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/webhooks",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"enabled_events\":[\"*\"],\"metadata\":{\"some\":\"metadata\"},\"url\":\"string\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_...",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"enabled_events":["*"],"metadata":{"some":"metadata"},"url":"string"}');

            $request->setRequestUrl('https://api.tucuota.com/v1/webhooks');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $request->setHeaders([
              'content-type' => 'application/json',
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            payload = "{\"enabled_events\":[\"*\"],\"metadata\":{\"some\":\"metadata\"},\"url\":\"string\"}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Bearer sk_live_..."
                }

            conn.request("POST", "/v1/webhooks", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://api.tucuota.com/v1/webhooks")
              .header("content-type", "application/json")
              .header("Authorization", "Bearer sk_live_...")
              .body("{\"enabled_events\":[\"*\"],\"metadata\":{\"some\":\"metadata\"},\"url\":\"string\"}")
              .asString();
      x-codegen-request-body-name: body
  '/v1/webhooks/{id}':
    get:
      operationId: GetWebhook
      summary: Retrieve a webhook
      description: Retrieves a webhook.
      parameters:
        - name: id
          in: path
          description: Webhook ID.
          required: true
          schema:
            type: string
          example: WHq4VzyAzDgB
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: |-
                      You can configure [webhook endpoints](https://tucuota.com/docs/webhooks/) via the API to be
                      notified about events that happen in your TuCuota account or connected
                      accounts.

                      Most users configure webhooks from [the dashboard](https://dashboard.tucuota.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
                    type: object
                    example:
                      created_at: '2022-02-11T23:19:22-03:00'
                      enabled: true
                      enabled_events:
                        - '*'
                      id: WHq4VzyAzDgB
                      livemode: false
                      object: webhook
                      secret: DmUeH9E9yJ7ax9IYQVm9HpQ3VWvIx0
                      updated_at: '2022-02-11T23:19:22-03:00'
                      url: 'https://site.com/webhook'
                    properties:
                      id:
                        description: Unique identifier for the object.
                        type: string
                        maxLength: 5000
                      object:
                        type: string
                        enum:
                          - webhook
                      url:
                        description: The URL of the webhook endpoint.
                        type: string
                        example: 'https://tucuota.com/webhook/200'
                        maxLength: 5000
                      enabled:
                        description: Whether the webhook is enabled.
                        type: boolean
                      enabled_events:
                        description: |
                          One of: `customer.created`, `customer.disabled`, `customer.restored`, `customer.updated`, `gateway.created`, `gateway.disabled`, `gateway.updated`, `payment.cancelled`, `payment.created`, `payment.retrying`, `payment.updated`, `payment_method.automatically_updated`, `payment_method.created`, `payment_method.updated`, `subscription.cancelled`, `subscription.created`, `subscription.finished`, `subscription.paused`, `subscription.resumed`, `subscription.updated`, `user.updated_available_brands`
                        type: array
                        items:
                          type: string
                        example:
                          - customer.created
                          - customer.updated
                          - payment.created
                      secret:
                        description: 'The endpoint''s secret, used to generate [webhook signatures](https://tucuota.com/docs/webhooks/signatures).'
                        type: string
                        example: Rrdm41mW4x54uUS2A6QnHhm7hXwpuR
                        maxLength: 5000
                      failed_lately_count:
                        type: integer
                        format: int32
                        example: 0
                      success_lately_count:
                        type: integer
                        format: int32
                        example: 0
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                    title: Webhook
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                description: Not Found response
                type: object
                properties:
                  message:
                    type: string
                    example: Record not found
                title: Not Found
      tags:
        - Webhooks
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http GET https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'GET',
              url: 'https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("GET", "/v1/webhooks/WHq4VzyAzDgB", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
    put:
      operationId: PutWebhooks
      summary: Update a webhook
      description: Updates a webhook.
      parameters:
        - name: id
          in: path
          description: Webhook ID.
          required: true
          schema:
            type: string
          example: WHq4VzyAzDgB
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
              example:
                url: 'http://somesite.com'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: |-
                      You can configure [webhook endpoints](https://tucuota.com/docs/webhooks/) via the API to be
                      notified about events that happen in your TuCuota account or connected
                      accounts.

                      Most users configure webhooks from [the dashboard](https://dashboard.tucuota.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
                    type: object
                    example:
                      created_at: '2022-02-11T23:19:22-03:00'
                      enabled: true
                      enabled_events:
                        - '*'
                      id: WHq4VzyAzDgB
                      livemode: false
                      object: webhook
                      secret: DmUeH9E9yJ7ax9IYQVm9HpQ3VWvIx0
                      updated_at: '2022-02-11T23:19:22-03:00'
                      url: 'https://site.com/webhook'
                    properties:
                      id:
                        description: Unique identifier for the object.
                        type: string
                        maxLength: 5000
                      object:
                        type: string
                        enum:
                          - webhook
                      url:
                        description: The URL of the webhook endpoint.
                        type: string
                        example: 'https://tucuota.com/webhook/200'
                        maxLength: 5000
                      enabled:
                        description: Whether the webhook is enabled.
                        type: boolean
                      enabled_events:
                        description: |
                          One of: `customer.created`, `customer.disabled`, `customer.restored`, `customer.updated`, `gateway.created`, `gateway.disabled`, `gateway.updated`, `payment.cancelled`, `payment.created`, `payment.retrying`, `payment.updated`, `payment_method.automatically_updated`, `payment_method.created`, `payment_method.updated`, `subscription.cancelled`, `subscription.created`, `subscription.finished`, `subscription.paused`, `subscription.resumed`, `subscription.updated`, `user.updated_available_brands`
                        type: array
                        items:
                          type: string
                        example:
                          - customer.created
                          - customer.updated
                          - payment.created
                      secret:
                        description: 'The endpoint''s secret, used to generate [webhook signatures](https://tucuota.com/docs/webhooks/signatures).'
                        type: string
                        example: Rrdm41mW4x54uUS2A6QnHhm7hXwpuR
                        maxLength: 5000
                      failed_lately_count:
                        type: integer
                        format: int32
                        example: 0
                      success_lately_count:
                        type: integer
                        format: int32
                        example: 0
                      livemode:
                        description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
                        type: boolean
                      created_at:
                        description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                      updated_at:
                        description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
                        type: string
                        format: date-time
                        example: '2022-02-11T23:19:22-03:00'
                    title: Webhook
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                errors:
                  url:
                    - El campo es obligatorio.
                message: The given data was invalid.
      tags:
        - Webhooks
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request PUT \
              --url https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB \
              --header 'Authorization: Bearer sk_live_...' \
              --header 'content-type: application/json' \
              --data '{"url":"http://somesite.com"}'
        - lang: Shell + Httpie
          source: |-
            echo '{"url":"http://somesite.com"}' |  \
              http PUT https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB \
              Authorization:'Bearer sk_live_...' \
              content-type:application/json
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'PUT',
              url: 'https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB',
              headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer sk_live_...'
              },
              body: {url: 'http://somesite.com'},
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"url\":\"http://somesite.com\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_...",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"url":"http://somesite.com"}');

            $request->setRequestUrl('https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB');
            $request->setRequestMethod('PUT');
            $request->setBody($body);

            $request->setHeaders([
              'content-type' => 'application/json',
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            payload = "{\"url\":\"http://somesite.com\"}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Bearer sk_live_..."
                }

            conn.request("PUT", "/v1/webhooks/WHq4VzyAzDgB", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.put("https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB")
              .header("content-type", "application/json")
              .header("Authorization", "Bearer sk_live_...")
              .body("{\"url\":\"http://somesite.com\"}")
              .asString();
      x-codegen-request-body-name: body
    delete:
      operationId: DeleteWebhok
      summary: Delete a webhook
      description: Delete a webhook.
      parameters:
        - name: id
          in: path
          description: Webhook ID.
          required: true
          schema:
            type: string
          example: WHq4VzyAzDgB
      responses:
        '201':
          description: OK
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: Unauthorized response
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                    title: Unauthorized
      tags:
        - Webhooks
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request DELETE \
              --url https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB \
              --header 'Authorization: Bearer sk_live_...'
        - lang: Shell + Httpie
          source: |-
            http DELETE https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB \
              Authorization:'Bearer sk_live_...'
        - lang: Node + Request
          source: |
            const request = require('request');

            const options = {
              method: 'DELETE',
              url: 'https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB',
              headers: {Authorization: 'Bearer sk_live_...'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer sk_live_..."
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB');
            $request->setRequestMethod('DELETE');
            $request->setHeaders([
              'Authorization' => 'Bearer sk_live_...'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.tucuota.com")

            headers = { 'Authorization': "Bearer sk_live_..." }

            conn.request("DELETE", "/v1/webhooks/WHq4VzyAzDgB", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.delete("https://api.tucuota.com/v1/webhooks/WHq4VzyAzDgB")
              .header("Authorization", "Bearer sk_live_...")
              .asString();
components:
  schemas:
    '401':
      description: Unauthorized response
      type: object
      properties:
        message:
          type: string
          example: Unauthorized
      title: Unauthorized
    '404':
      description: Not Found response
      type: object
      properties:
        message:
          type: string
          example: Record not found
      title: Not Found
    id:
      description: Unique identifier for the object.
      type: string
      maxLength: 5000
    name:
      description: The customer's full name or business name.
      type: string
      example: Jorgelina Castro
    email:
      description: The customer's email address.
      type: string
      example: asd@asd.com
    livemode:
      description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
      type: boolean
    metadata:
      description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
      example:
        some: metadata
      anyOf:
        - additionalProperties:
            type: string
          type: object
        - enum:
            - ''
          type: string
        - type: 'null'
    created_at:
      description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
      type: string
      format: date-time
      example: '2022-02-11T23:19:22-03:00'
    updated_at:
      description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
      type: string
      format: date-time
      example: '2022-02-11T23:19:22-03:00'
    deleted_at:
      description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
      format: date-time
      example: '2022-02-11T23:19:22-03:00'
      oneOf:
        - type: 'null'
        - type: string
    customer:
      description: This object represents a customer of your organization.
      type: object
      properties:
        id:
          description: Unique identifier for the object.
          type: string
          example: CSljikas98
          maxLength: 5000
        name:
          description: The customer's full name or business name.
          type: string
          example: Jorgelina Castro
        email:
          description: The customer's email address.
          type: string
          example: asd@asd.com
        livemode:
          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
          type: boolean
        metadata:
          description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
          example:
            some: metadata
          anyOf:
            - additionalProperties:
                type: string
              type: object
            - enum:
                - ''
              type: string
            - type: 'null'
        mobile_number:
          example: '5491164531234'
          oneOf:
            - type: 'null'
            - type: string
        gateway_identifier:
          type: integer
          format: int32
          example: 383473
        identification_number:
          example: 15.555.324
          oneOf:
            - type: 'null'
            - type: string
        identification_type:
          example: DNI
          oneOf:
            - type: 'null'
            - type: string
        created_at:
          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        updated_at:
          description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        active_subscriptions_count:
          type: integer
          format: int32
          example: 0
        active_subscriptions_sum:
          type: integer
          format: int32
          example: 0
        approved_payments_count:
          type: integer
          format: int32
          example: 0
        approved_payments_sum:
          type: integer
          format: int32
          example: 0
        cancelled_subscriptions_count:
          type: integer
          format: int32
          example: 0
        paused_subscriptions_count:
          type: integer
          format: int32
          example: 0
        rejected_payments_count:
          type: integer
          format: int32
          example: 0
        rejected_payments_sum:
          type: integer
          format: int32
          example: 0
        finished_subscriptions_count:
          type: integer
          format: int32
          example: 0
        deleted_at:
          description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
          oneOf:
            - type: 'null'
            - type: string
      title: Customer
    links:
      description: Pagination metadata
      type: object
      properties:
        first:
          type: string
          example: 'https://api.tucuota.test/v1/customers'
          nullable: true
        last:
          type: string
          example: 'https://api.tucuota.test/v1/customers'
          nullable: true
        next:
          type: string
          example: 'https://api.tucuota.test/v1/customers'
          nullable: true
        prev:
          type: string
          example: 'https://api.tucuota.test/v1/customers'
          nullable: true
      title: Response Meta
    meta:
      description: Pagination metadata
      type: object
      properties:
        current_page:
          type: number
          example: 1
        from:
          type: number
          example: 1
        last_page:
          type: number
          example: 28
        per_page:
          type: number
          example: 1
        to:
          type: number
          example: 1
        total:
          type: number
          example: 2
        path:
          type: string
          example: 'https://api.tucuota.test/v1/customers'
      title: Response Meta
    delivered_at:
      description: 'Time at which the event was delivered. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
      format: date-time
      example: '2022-02-11T23:19:22-03:00'
      oneOf:
        - type: 'null'
        - type: string
    event:
      type: object
      properties:
        id:
          description: Unique identifier for the object.
          type: string
          maxLength: 5000
        object:
          type: string
        created_at:
          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        data:
          type: object
          properties:
            object:
              description: Event object.
              type: object
          required:
            - object
        delivered_at:
          description: 'Time at which the event was delivered. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
          oneOf:
            - type: 'null'
            - type: string
        livemode:
          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
          type: boolean
        resource:
          type: string
          example: customer
        resource_id:
          type: string
          example: CS12312d1d1dl
        type:
          type: string
          example: customer.created
      required:
        - created_at
        - data
        - delivered_at
        - id
        - livemode
        - object
        - resource
        - resource_id
        - type
    cancelled_at:
      description: 'Time at which the import was marked as cancelled. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
      type: string
      format: date-time
      example: '2022-02-11T23:19:22-03:00'
    invalid_at:
      description: 'Time at which the import was marked as invalid. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
      type: string
      format: date-time
      example: '2022-02-11T23:19:22-03:00'
    processed_at:
      description: 'Time at which the import was marked as processed. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
      type: string
      format: date-time
      example: '2022-02-11T23:19:22-03:00'
    ready_at:
      description: 'Time at which the import was marked as ready. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
      type: string
      format: date-time
      example: '2022-02-11T23:19:22-03:00'
    import:
      description: This object represents an import of your account.
      type: object
      properties:
        id:
          description: Unique identifier for the object.
          type: string
          example: IM129038120h
          maxLength: 5000
        batch_job:
          type: object
        cancelled_at:
          description: 'Time at which the import was marked as cancelled. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        invalid_at:
          description: 'Time at which the import was marked as invalid. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        processed_at:
          description: 'Time at which the import was marked as processed. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        ready_at:
          description: 'Time at which the import was marked as ready. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        invalid_rows_count:
          description: Invalid Rows Count
          type: number
          example: 0
        valid_rows_count:
          description: Valid Rows Count
          type: number
          example: 0
        rows_count:
          description: Rows Count
          type: number
          example: 0
        livemode:
          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
          type: boolean
        original_filename:
          type: string
          example: subscriptions-import-template.csv
        type:
          description: Import Type
          type: string
          example: subscriptions
        status:
          description: Import Status
          type: string
          example: processed
        created_at:
          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        updated_at:
          description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
      title: Import
    link:
      description: This object represents a public link of your organization.
      type: object
      properties:
        id:
          description: Unique identifier for the object.
          type: string
          example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
          maxLength: 5000
        livemode:
          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
          type: boolean
        metadata:
          description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
          example:
            some: metadata
          anyOf:
            - additionalProperties:
                type: string
              type: object
            - enum:
                - ''
              type: string
            - type: 'null'
        created_at:
          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        updated_at:
          description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        deleted_at:
          description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
          oneOf:
            - type: 'null'
            - type: string
      title: Link
    card:
      type: object
      properties:
        bank:
          type: string
        brand:
          type: string
          example: visa-credito
        country:
          type: string
          example: AR
        expiration_month:
          type: number
        expiration_year:
          type: number
        fingerprint:
          type: string
        last_four_digits:
          type: string
    cbu:
      type: object
      properties:
        bank:
          type: string
        country:
          type: string
        fingerprint:
          type: string
        last_four_digits:
          type: string
    payment_method:
      type: object
      properties:
        type:
          description: 'One of: cbu, card.'
          type: string
        card:
          type: object
          properties:
            bank:
              type: string
            brand:
              type: string
              example: visa-credito
            country:
              type: string
              example: AR
            expiration_month:
              type: number
            expiration_year:
              type: number
            fingerprint:
              type: string
            last_four_digits:
              type: string
        cbu:
          type: object
          properties:
            bank:
              type: string
            country:
              type: string
            fingerprint:
              type: string
            last_four_digits:
              type: string
        created_at:
          type: string
        id:
          type: string
        livemode:
          type: boolean
        object:
          type: string
        updated_at:
          type: string
    mandate:
      description: This object represents a mandate of your organization.
      type: object
      properties:
        id:
          description: Unique identifier for the object.
          type: string
          example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
          maxLength: 5000
        livemode:
          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
          type: boolean
        metadata:
          description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
          example:
            some: metadata
          anyOf:
            - additionalProperties:
                type: string
              type: object
            - enum:
                - ''
              type: string
            - type: 'null'
        created_at:
          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        updated_at:
          description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        deleted_at:
          description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
          oneOf:
            - type: 'null'
            - type: string
        customer:
          description: This object represents a customer of your organization.
          type: object
          properties:
            id:
              description: Unique identifier for the object.
              type: string
              example: CSljikas98
              maxLength: 5000
            name:
              description: The customer's full name or business name.
              type: string
              example: Jorgelina Castro
            email:
              description: The customer's email address.
              type: string
              example: asd@asd.com
            livemode:
              description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
              type: boolean
            metadata:
              description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
              example:
                some: metadata
              anyOf:
                - additionalProperties:
                    type: string
                  type: object
                - enum:
                    - ''
                  type: string
                - type: 'null'
            mobile_number:
              example: '5491164531234'
              oneOf:
                - type: 'null'
                - type: string
            gateway_identifier:
              type: integer
              format: int32
              example: 383473
            identification_number:
              example: 15.555.324
              oneOf:
                - type: 'null'
                - type: string
            identification_type:
              example: DNI
              oneOf:
                - type: 'null'
                - type: string
            created_at:
              description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
              type: string
              format: date-time
              example: '2022-02-11T23:19:22-03:00'
            updated_at:
              description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
              type: string
              format: date-time
              example: '2022-02-11T23:19:22-03:00'
            active_subscriptions_count:
              type: integer
              format: int32
              example: 0
            active_subscriptions_sum:
              type: integer
              format: int32
              example: 0
            approved_payments_count:
              type: integer
              format: int32
              example: 0
            approved_payments_sum:
              type: integer
              format: int32
              example: 0
            cancelled_subscriptions_count:
              type: integer
              format: int32
              example: 0
            paused_subscriptions_count:
              type: integer
              format: int32
              example: 0
            rejected_payments_count:
              type: integer
              format: int32
              example: 0
            rejected_payments_sum:
              type: integer
              format: int32
              example: 0
            finished_subscriptions_count:
              type: integer
              format: int32
              example: 0
            deleted_at:
              description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
              format: date-time
              example: '2022-02-11T23:19:22-03:00'
              oneOf:
                - type: 'null'
                - type: string
          title: Customer
        payment_method:
          type: object
          properties:
            type:
              description: 'One of: cbu, card.'
              type: string
            card:
              type: object
              properties:
                bank:
                  type: string
                brand:
                  type: string
                  example: visa-credito
                country:
                  type: string
                  example: AR
                expiration_month:
                  type: number
                expiration_year:
                  type: number
                fingerprint:
                  type: string
                last_four_digits:
                  type: string
            cbu:
              type: object
              properties:
                bank:
                  type: string
                country:
                  type: string
                fingerprint:
                  type: string
                last_four_digits:
                  type: string
            created_at:
              type: string
            id:
              type: string
            livemode:
              type: boolean
            object:
              type: string
            updated_at:
              type: string
      title: Mandate
    subscription:
      description: This object represents a subscription of your organization.
      type: object
      properties:
        created_at:
          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        currency:
          type: string
        approved_payments_count:
          type: number
        approved_payments_sum:
          type: number
        customer:
          description: This object represents a customer of your organization.
          type: object
          properties:
            id:
              description: Unique identifier for the object.
              type: string
              example: CSljikas98
              maxLength: 5000
            name:
              description: The customer's full name or business name.
              type: string
              example: Jorgelina Castro
            email:
              description: The customer's email address.
              type: string
              example: asd@asd.com
            livemode:
              description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
              type: boolean
            metadata:
              description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
              example:
                some: metadata
              anyOf:
                - additionalProperties:
                    type: string
                  type: object
                - enum:
                    - ''
                  type: string
                - type: 'null'
            mobile_number:
              example: '5491164531234'
              oneOf:
                - type: 'null'
                - type: string
            gateway_identifier:
              type: integer
              format: int32
              example: 383473
            identification_number:
              example: 15.555.324
              oneOf:
                - type: 'null'
                - type: string
            identification_type:
              example: DNI
              oneOf:
                - type: 'null'
                - type: string
            created_at:
              description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
              type: string
              format: date-time
              example: '2022-02-11T23:19:22-03:00'
            updated_at:
              description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
              type: string
              format: date-time
              example: '2022-02-11T23:19:22-03:00'
            active_subscriptions_count:
              type: integer
              format: int32
              example: 0
            active_subscriptions_sum:
              type: integer
              format: int32
              example: 0
            approved_payments_count:
              type: integer
              format: int32
              example: 0
            approved_payments_sum:
              type: integer
              format: int32
              example: 0
            cancelled_subscriptions_count:
              type: integer
              format: int32
              example: 0
            paused_subscriptions_count:
              type: integer
              format: int32
              example: 0
            rejected_payments_count:
              type: integer
              format: int32
              example: 0
            rejected_payments_sum:
              type: integer
              format: int32
              example: 0
            finished_subscriptions_count:
              type: integer
              format: int32
              example: 0
            deleted_at:
              description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
              format: date-time
              example: '2022-02-11T23:19:22-03:00'
              oneOf:
                - type: 'null'
                - type: string
          title: Customer
        first_date:
          type: string
        id:
          type: string
        livemode:
          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
          type: boolean
        metadata:
          description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
          example:
            some: metadata
          anyOf:
            - additionalProperties:
                type: string
              type: object
            - enum:
                - ''
              type: string
            - type: 'null'
        object:
          type: string
        payment_method:
          type: object
          properties:
            type:
              description: 'One of: cbu, card.'
              type: string
            card:
              type: object
              properties:
                bank:
                  type: string
                brand:
                  type: string
                  example: visa-credito
                country:
                  type: string
                  example: AR
                expiration_month:
                  type: number
                expiration_year:
                  type: number
                fingerprint:
                  type: string
                last_four_digits:
                  type: string
            cbu:
              type: object
              properties:
                bank:
                  type: string
                country:
                  type: string
                fingerprint:
                  type: string
                last_four_digits:
                  type: string
            created_at:
              type: string
            id:
              type: string
            livemode:
              type: boolean
            object:
              type: string
            updated_at:
              type: string
        rejected_payments_count:
          type: number
        rejected_payments_sum:
          type: number
        start_date:
          type: string
        status:
          type: string
        upcoming_dates:
          type: array
          items:
            type: object
        updated_at:
          description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
      title: Subscription
    payment:
      type: object
    completed_at:
      description: 'Time at which the sessions was completed. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
      type: string
      format: date-time
      example: '2022-02-11T23:19:22-03:00'
    uuid:
      description: UUID identifier for the object.
      type: string
      example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
    session:
      description: This object represents a session of your organization.
      type: object
      properties:
        amount:
          description: Amount to be collected
          type: number
          example: 12.5
        brands:
          type: array
        completed_at:
          description: 'Time at which the sessions was completed. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        count:
          type: number
        created_at:
          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        id:
          description: UUID identifier for the object.
          type: string
          example: 43751655-7580-4bd7-8bad-3c54ed1c4abc
        name:
          description: The customer's full name or business name.
          type: string
          example: Jorgelina Castro
        email:
          description: The customer's email address.
          type: string
          example: asd@asd.com
        livemode:
          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
          type: boolean
        metadata:
          description: 'Set of [key-value pairs](http://127.0.0.1:8080/#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
          example:
            some: metadata
          anyOf:
            - additionalProperties:
                type: string
              type: object
            - enum:
                - ''
              type: string
            - type: 'null'
        mobile_number:
          example: '5491164531234'
          oneOf:
            - type: 'null'
            - type: string
        gateway_identifier:
          type: integer
          format: int32
          example: 383473
        identification_number:
          example: 15.555.324
          oneOf:
            - type: 'null'
            - type: string
        identification_type:
          example: DNI
          oneOf:
            - type: 'null'
            - type: string
        updated_at:
          description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        active_subscriptions_count:
          type: integer
          format: int32
          example: 0
        active_subscriptions_sum:
          type: integer
          format: int32
          example: 0
        approved_payments_count:
          type: integer
          format: int32
          example: 0
        approved_payments_sum:
          type: integer
          format: int32
          example: 0
        cancelled_subscriptions_count:
          type: integer
          format: int32
          example: 0
        paused_subscriptions_count:
          type: integer
          format: int32
          example: 0
        rejected_payments_count:
          type: integer
          format: int32
          example: 0
        rejected_payments_sum:
          type: integer
          format: int32
          example: 0
        finished_subscriptions_count:
          type: integer
          format: int32
          example: 0
        deleted_at:
          description: 'Time at which the object was deleted. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
          oneOf:
            - type: 'null'
            - type: string
      title: Session
    webhook:
      description: |-
        You can configure [webhook endpoints](https://tucuota.com/docs/webhooks/) via the API to be
        notified about events that happen in your TuCuota account or connected
        accounts.

        Most users configure webhooks from [the dashboard](https://dashboard.tucuota.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
      type: object
      properties:
        id:
          description: Unique identifier for the object.
          type: string
          maxLength: 5000
        object:
          type: string
          enum:
            - webhook
        url:
          description: The URL of the webhook endpoint.
          type: string
          example: 'https://tucuota.com/webhook/200'
          maxLength: 5000
        enabled:
          description: Whether the webhook is enabled.
          type: boolean
        enabled_events:
          description: |
            One of: `customer.created`, `customer.disabled`, `customer.restored`, `customer.updated`, `gateway.created`, `gateway.disabled`, `gateway.updated`, `payment.cancelled`, `payment.created`, `payment.retrying`, `payment.updated`, `payment_method.automatically_updated`, `payment_method.created`, `payment_method.updated`, `subscription.cancelled`, `subscription.created`, `subscription.finished`, `subscription.paused`, `subscription.resumed`, `subscription.updated`, `user.updated_available_brands`
          type: array
          items:
            type: string
          example:
            - customer.created
            - customer.updated
            - payment.created
        secret:
          description: 'The endpoint''s secret, used to generate [webhook signatures](https://tucuota.com/docs/webhooks/signatures).'
          type: string
          example: Rrdm41mW4x54uUS2A6QnHhm7hXwpuR
          maxLength: 5000
        failed_lately_count:
          type: integer
          format: int32
          example: 0
        success_lately_count:
          type: integer
          format: int32
          example: 0
        livemode:
          description: Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
          type: boolean
        created_at:
          description: 'Time at which the object was created. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
        updated_at:
          description: 'Time at which the object was last updated. Formatting follows [RFC339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8).'
          type: string
          format: date-time
          example: '2022-02-11T23:19:22-03:00'
      example:
        created_at: '2022-02-11T23:19:22-03:00'
        enabled: true
        enabled_events:
          - '*'
        id: WHq4VzyAzDgB
        livemode: false
        object: webhook
        secret: DmUeH9E9yJ7ax9IYQVm9HpQ3VWvIx0
        updated_at: '2022-02-11T23:19:22-03:00'
        url: 'https://site.com/webhook'
      title: Webhook
    validation-error:
      description: asd
      type: object
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            type: string
      title: Validation Error
    api-response:
      description: 'A better exclusion of the two groups of properties, using oneOf.'
      type: object
      oneOf:
        - properties:
            data:
              description: The matching data
              type: array
            meta:
              description: Any relevant metadata
              type: object
        - properties:
            errors:
              description: ''
              type: array
  examples:
    customer:
      summary: Sample Customer
      value:
        active_subscriptions_count: 0
        active_subscriptions_sum: 0
        approved_payments_count: 0
        approved_payments_sum: 0
        cancelled_subscriptions_count: 0
        created_at: '2022-02-05T01:42:13-03:00'
        deleted_at: null
        email: john@doe.com
        finished_subscriptions_count: 0
        gateway_identifier: 383473
        id: CSnlZxyY3jwr
        identification_number: null
        identification_type: null
        livemode: false
        metadata: null
        mobile_number: '5491154876503'
        name: John Doe
        paused_subscriptions_count: 0
        rejected_payments_count: 0
        rejected_payments_sum: 0
        updated_at: '2022-02-05T01:42:13-03:00'
    event:
      summary: Sample Subscription
      value:
        created_at: '2022-02-05T01:42:13-03:00'
        data:
          object:
            created_at: '2022-02-05T01:42:13-03:00'
            deleted_at: null
            email: john@doe.com
            gateway_identifier: 383473
            id: CSnlZxyY3jwr
            identification_number: null
            identification_type: null
            livemode: false
            metadata: null
            mobile_number: '5491154876503'
            name: John Doe
            updated_at: '2022-02-05T01:42:13-03:00'
        delivered_at: '2022-02-11T20:11:38-03:00'
        id: EVaX3JagwR6x
        livemode: false
        object: event
        resource: customer
        resource_id: CSnlZxyY3jwr
        type: customer.created
    export:
      summary: Sample Subscription
      value:
        created_at: '2022-01-25T14:10:01-03:00'
        created_from: manual
        filename: exports/payments_monthly-2022-01-25-LiB4e3h4C1CBlmGK.xlsx
        id: EXaxk4p1DkXd
        livemode: false
        status: ready
        type: payments_monthly
        updated_at: '2022-01-26T15:36:57-03:00'
    gateway:
      summary: Sample Gateway
      value:
        brand_list:
          - visa-debito
        brands:
          visa-debito: true
        code_length: null
        created_at: '2021-06-07T17:51:37-03:00'
        disabled: false
        gatewaykind: visaD
        id: GWOa6APJMKze
        livemode: false
        number: '12111'
        number_bank_retries: null
        object: gateway
        updated_at: '2021-06-07T17:51:37-03:00'
        username: DEMENTIRITA
    import:
      summary: Sample Import
      value:
        batch_job:
          created_at: '2021-06-08T12:49:06-03:00'
          failed_jobs: 0
          finished_at: '2021-06-08T12:49:06-03:00'
          pending_jobs: 0
          progress: 100
          total_jobs: 2
        cancelled_at: null
        created_at: '2021-06-08T09:49:04-03:00'
        id: IMB1rRDqkM5X
        invalid_at: null
        invalid_rows_count: 0
        livemode: false
        original_filename: subscriptions-import-template.csv
        processed_at: '2021-06-08T09:49:06-03:00'
        ready_at: '2021-06-08T09:49:05-03:00'
        rows_count: 2
        status: processed
        type: subscriptions
        updated_at: '2021-06-08T09:49:06-03:00'
        valid_rows_count: 2
    link:
      summary: Sample Link
      value:
        body: hoiadsad ad sad
        brands: []
        button_text: null
        created_at: '2022-02-02T02:06:22.00-03:00'
        deleted_at: null
        enabled: true
        extra_fields: []
        extra_fields_customer: []
        id: b7fba990-83cc-11ec-8c7b-5b2fd150abb2
        kind: payment
        livemode: false
        metadata: null
        name_text: null
        object: link
        options:
          - amount: '100'
            count: null
            description: mucho
            editable_amount: false
            editable_count: false
            installments: 1
            interval: '1'
            interval_unit: monthly
            max_installments: null
            show_count: false
            show_installments: false
          - amount: '75'
            count: null
            description: poco
            editable_amount: false
            editable_count: false
            installments: 1
            interval: '1'
            interval_unit: monthly
            max_installments: null
            show_count: false
            show_installments: false
        public_uri: 'https://tucuota.com/link/b7fba990-83cc-11ec-8c7b-5b2fd150abb2'
        success_url: null
        title: Test options
        updated_at: '2022-02-02T02:06:22.00-03:00'
        user:
          country: AR
          currency: ARS
          email: juandelperal@gmail.com
          organization_name: TuCuota
          preference_color1: '#ffffff'
          preference_color2: '#d10000'
          preference_logo: 'https://tucuota-user-uploads.s3.amazonaws.com/production/e8d7c19b93dec70b352b68e16fcb066e.png'
    mandate:
      summary: Sample Mandate
      value:
        created_at: '2022-02-01T19:06:37-03:00'
        customer:
          created_at: '2022-02-05T01:42:13-03:00'
          deleted_at: null
          email: john@doe.com
          gateway_identifier: 383473
          id: CSnlZxyY3jwr
          identification_number: null
          identification_type: null
          livemode: false
          metadata: null
          mobile_number: '5491154876503'
          name: John Doe
          updated_at: '2022-02-05T01:42:13-03:00'
        deleted_at: null
        id: 3990a740-83ab-11ec-8651-cde6203c968e
        livemode: false
        metadata:
          dni: '1231232131'
        object: mandate
        payment_method:
          $ref: ./payment_method.yaml
        status: active
        updated_at: '2022-02-01T19:06:37-03:00'
    payment:
      summary: Sample Payment
      value:
        amount: 75
        auto_retries_max_attempts: null
        can_auto_retry_until: null
        charge_date: '2022-02-01'
        created_at: '2022-02-01T23:13:05-03:00'
        currency: ARS
        customer:
          $ref: '#/components/examples/customer'
        description: poco
        effective_charged_date: null
        estimated_accreditation_date: null
        gateway: GWZYpKR8bA0W
        gateway_identifier: null
        id: PYa6k6LlypzP
        livemode: false
        metadata: []
        object: payment
        paid: false
        payment_method:
          $ref: '#/components/examples/payment_method'
        response_message: ''
        retryable: false
        status: pending_submission
        submissions_count: 0
        subscription: null
        subscription_payment_number: null
        updated_at: '2022-02-01T23:13:05-03:00'
        updated_status: null
    payment_method:
      summary: Sample Payment Method
      value:
        bank: Visa
        brand: visa-credito
        card:
          bank: Visa
          brand: visa-credito
          country: AR
          expiration_month: null
          expiration_year: null
          fingerprint: 0sZQikKp4lImAgIo
          funding: credit
          last_four_digits: '4242'
        created_at: '2022-02-01T23:13:04-03:00'
        id: PMBja4YZ2GDR
        livemode: false
        metadata: null
        object: payment_method
        type: card
        updated_at: '2022-02-01T23:13:04-03:00'
    session:
      summary: Sample Session
      value:
        amount: '100.00'
        brands: []
        completed_at: null
        count: null
        created_at: '2022-02-11T23:17:54.00-03:00'
        customer_email: null
        customer_id: null
        customer_name: null
        day_of_month: null
        day_of_week: null
        deleted_at: null
        description: mucho
        editable_amount: false
        editable_count: false
        extra_fields: []
        extra_fields_customer: []
        id: d6fe7bf0-8b90-11ec-9bb7-ad20fd301d81
        installments: 1
        interval: 1
        interval_unit: monthly
        kind: payment
        link_id: b7fba990-83cc-11ec-8c7b-5b2fd150abb2
        livemode: false
        max_installments: null
        name_text: null
        object: session
        public_uri: 'https://tucuota.com/checkout/d6fe7bf0-8b90-11ec-9bb7-ad20fd301d81'
        updated_at: '2022-02-11T23:17:55.00-03:00'
        user:
          country: AR
          currency: ARS
          email: juandelperal@gmail.com
          organization_name: TuCuota
          preference_color1: '#ffffff'
          preference_color2: '#d10000'
          preference_logo: 'https://tucuota-user-uploads.s3.amazonaws.com/production/e8d7c19b93dec70b352b68e16fcb066e.png'
    subscription:
      summary: Sample Subscription
      value:
        amount: 900
        approved_payments_count: 0
        approved_payments_sum: 0
        count: null
        created_at: '2021-06-08T09:49:06-03:00'
        currency: ARS
        customer:
          $ref: '#/components/examples/customer'
        day_of_month: 14
        day_of_week: null
        description: Expensas
        first_date: '2022-02-14'
        id: SBawNMWW2AMlWZ
        interval: 1
        interval_unit: monthly
        livemode: false
        metadata:
          additional_data: null
          more_data: null
        object: subscription
        payment_method:
          $ref: '#/components/examples/payment_method'
        payments_created: 4
        rejected_payments_count: 0
        rejected_payments_sum: 0
        start_date: null
        status: active
        upcoming_dates:
          - '2022-02-14'
          - '2022-03-14'
          - '2022-04-14'
          - '2022-05-14'
          - '2022-06-14'
        updated_at: '2021-06-08T09:49:06-03:00'
    webhook:
      summary: Sample Webhook
      value:
        created_at: '2022-02-11T23:19:22-03:00'
        enabled: true
        enabled_events:
          - '*'
        id: WHq4VzyAzDgB
        livemode: false
        object: webhook
        secret: DmUeH9E9yJ7ax9IYQVm9HpQ3VWvIx0
        updated_at: '2022-02-11T23:19:22-03:00'
        url: 'https://site.com/webhook'
  securitySchemes:
    bearerAuth:
      description: 'Bearer HTTP authentication. Allowed headers-- Authorization: Bearer <api_key>'
      scheme: bearer
      type: http
      bearerFormat: auth-scheme
    basicAuth:
      description: 'Basic HTTP authentication. Allowed headers-- Authorization: Basic <api_key> | Authorization: Basic <base64 hash of `api_key:`>'
      scheme: basic
      type: http
tags:
  - name: Customers
    description: |
      A Customer is Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
      quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
      consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
      cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
      proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

      <SchemaDefinition schemaRef="#/components/schemas/customer" exampleRef="#/components/examples/customer" showReadOnly={true} showWriteOnly={true} />
  - name: Events
    description: |
      An Event is Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
      quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
      consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
      cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
      proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

      <SchemaDefinition schemaRef="#/components/schemas/event" exampleRef="#/components/examples/event" showReadOnly={true} showWriteOnly={true} />
  - name: Imports
    description: |
      An Import is Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
      quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo.

      <SchemaDefinition schemaRef="#/components/schemas/import" exampleRef="#/components/examples/import" showReadOnly={true} showWriteOnly={true} />
  - name: Links
    description: |
      A Link is Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
      quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo.

      <SchemaDefinition schemaRef="#/components/schemas/link" exampleRef="#/components/examples/link" showReadOnly={true} showWriteOnly={true} />
  - name: Mandates
    description: |
      A Mandate is Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
      quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo.

      <SchemaDefinition schemaRef="#/components/schemas/mandate" exampleRef="#/components/examples/mandate" showReadOnly={true} showWriteOnly={true} />
  - name: Payment Methods
    description: |
      A Payment Method is Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
      quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo.

      <SchemaDefinition schemaRef="#/components/schemas/payment_method" exampleRef="#/components/examples/payment_method" showReadOnly={true} showWriteOnly={true} />
  - name: Payments
    description: |
      A Payment is Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
      quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
      consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
      cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
      proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

      | Status                 | Meaning                                                                            |
      | ---------------------- | ---------------------------------------------------------------------------------- |
      | **pending_submission** | The payment has been issued, but still not submitted to the finnancial entity      |
      | **cancelled**          | The payment has been manually cancelled                                            |
      | **submitted**          | The payment is succesfully submitted and being processing in the finnancial entity |
      | **failed**             | Couldn't be submitted to the finnancial entity. There is an error in the request   |
      | **will_retry**         | The attempt failed, but the finnancial entity will make a new attempt              |
      | **approved**           | Submitted OK and approved                                                          |
      | **rejected**           | Submitted OK but couldn't make the collection                                      |
      | **charged_back**       | The payment has been returned to the customer                                      |

      <SchemaDefinition schemaRef="#/components/schemas/payment" exampleRef="#/components/examples/payment" showReadOnly={true} showWriteOnly={true} />
  - name: Sessions
    description: |
      A Session is Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
      quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
      consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
      cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
      proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

      |  Status       | Meaning                                                                                  |
      | ------------- | ---------------------------------------------------------------------------------------- |
      | **active**    | The subscription is active and generating payments                                       |
      | **paused**    | The subscription have been manually paused and won't generate payments until is resumed. |
      | **cancelled** | The subscription have been manually cancelled.                                           |
      | **finished**  | The subscription is completed: all the payments were collected succesfully.              |

      <SchemaDefinition schemaRef="#/components/schemas/subscription" exampleRef="#/components/examples/subscription" showReadOnly={true} showWriteOnly={true} />
  - name: Subscriptions
    description: |
      A Subscription is Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
      quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
      consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
      cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
      proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

      | Status        | Meaning                                                                                  |
      | ------------- | ---------------------------------------------------------------------------------------- |
      | **active**    | The subscription is active and generating payments                                       |
      | **paused**    | The subscription have been manually paused and won't generate payments until is resumed. |
      | **cancelled** | The subscription have been manually cancelled.                                           |
      | **finished**  | The subscription is completed: all the payments were collected succ                      |

      <SchemaDefinition schemaRef="#/components/schemas/subscription" exampleRef="#/components/examples/subscription" showReadOnly={true} showWriteOnly={true} />
  - name: Webhooks
    description: |
      A Webhook is Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
      quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
      consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
      cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
      proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

      <SchemaDefinition schemaRef="#/components/schemas/webhook" exampleRef="#/components/examples/webhook" showReadOnly={true} showWriteOnly={true} />
externalDocs:
  description: TuCuota Docs.
  url: 'https://tucuota.com/docs'
security:
  - bearerAuth: []
